{"version":3,"file":"background.js","mappings":"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","sources":["webpack://bytebytebunny/./src/types/message.ts","webpack://bytebytebunny/./src/types/message-builder.ts","webpack://bytebytebunny/./src/background/session-handler.ts","webpack://bytebytebunny/./src/constants/index.ts","webpack://bytebytebunny/./src/utils/logger.ts","webpack://bytebytebunny/./src/background/data-manager.ts","webpack://bytebytebunny/./src/background/index.ts"],"sourcesContent":["// src/types/messages.ts\n// 定义所有可能的消息动作\nexport var MessageAction;\n(function (MessageAction) {\n    // 会话管理\n    MessageAction[\"SESSION_START\"] = \"session:start\";\n    MessageAction[\"SESSION_END\"] = \"session:end\";\n    MessageAction[\"SESSION_UPDATE\"] = \"session:update\";\n    MessageAction[\"SESSION_LEAVE\"] = \"session:leave\";\n    MessageAction[\"SESSION_RETURN\"] = \"session:return\";\n    MessageAction[\"SESSION_UPDATE_ACTIVITY\"] = \"session:update_activity\";\n    // 提交记录\n    MessageAction[\"SUBMISSION_ADD\"] = \"session:submission_add\";\n    // 问题相关\n    MessageAction[\"DATA_PROBLEM_UPDATE\"] = \"data:problem_update\";\n    // 数据管理\n    MessageAction[\"DATA_CLEAR_ALL\"] = \"data:clear_all\";\n    MessageAction[\"DATA_EXPORT\"] = \"data:export\";\n    MessageAction[\"DATA_IMPORT\"] = \"data:import\";\n    MessageAction[\"DATA_GET_STATS\"] = \"data:get_stats\";\n    MessageAction[\"DATA_GET_SESSIONS\"] = \"data:get_sessions\";\n    MessageAction[\"DATA_GET_PROBLEMS\"] = \"data:get_problems\";\n    MessageAction[\"DATA_GET_SETTINGS\"] = \"data:get_settings\";\n    MessageAction[\"DATA_UPDATE_SETTINGS\"] = \"data:update_settings\";\n})(MessageAction || (MessageAction = {}));\n// 预定义错误代码\nexport var MessageErrorCode;\n(function (MessageErrorCode) {\n    // 会话相关错误\n    MessageErrorCode[\"SESSION_INITIALIZE_ERROR\"] = \"session:initialize_error\";\n    MessageErrorCode[\"SESSION_LEAVE_ERROR\"] = \"session:leave_error\";\n    MessageErrorCode[\"SESSION_RETURN_ERROR\"] = \"session:return_error\";\n    MessageErrorCode[\"SESSION_UPDATE_ERROR\"] = \"session:update_error\";\n    MessageErrorCode[\"SESSION_CLOSE_ERROR\"] = \"session:close_error\";\n    MessageErrorCode[\"SESSION_NOT_FOUND\"] = \"session:not_found\";\n    // 提交相关错误\n    MessageErrorCode[\"SUBMISSION_ADD_ERROR\"] = \"submission:add_error\";\n    // 数据管理相关错误\n    MessageErrorCode[\"DATA_CLEAR_ERROR\"] = \"data:clear_error\";\n    MessageErrorCode[\"DATA_EXPORT_ERROR\"] = \"data:export_error\";\n    MessageErrorCode[\"DATA_IMPORT_ERROR\"] = \"data:import_error\";\n    // 问题相关错误\n    MessageErrorCode[\"DATA_PROBLEM_UPDATE_ERROR\"] = \"data:problem_update_error\";\n    // 设置相关错误\n    MessageErrorCode[\"DATA_SETTINGS_UPDATE_ERROR\"] = \"data:settings_update_error\";\n    // 存储相关错误\n    MessageErrorCode[\"DATA_STATS_ERROR\"] = \"data:stats_error\";\n    // 通用错误\n    MessageErrorCode[\"UNKNOWN_ERROR\"] = \"error:unknown\";\n})(MessageErrorCode || (MessageErrorCode = {}));\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { MessageAction, MessageErrorCode } from './message';\nexport class MessageBuilder {\n    // 异步操作包装器\n    static wrap(operation_1) {\n        return __awaiter(this, arguments, void 0, function* (operation, errorCode = MessageErrorCode.UNKNOWN_ERROR) {\n            try {\n                const result = yield operation();\n                return this.response.success(result);\n            }\n            catch (error) {\n                return this.response.error(errorCode, error instanceof Error ? error.message : 'Operation failed');\n            }\n        });\n    }\n}\n// Session 相关消息构建\nMessageBuilder.session = {\n    start(problem, currentTime) {\n        return {\n            action: MessageAction.SESSION_START,\n            payload: { problem, currentTime }\n        };\n    },\n    end(sessionId, endTime, endReason) {\n        return {\n            action: MessageAction.SESSION_END,\n            payload: { sessionId, endTime, endReason }\n        };\n    },\n    update(sessionId, updates) {\n        return {\n            action: MessageAction.SESSION_UPDATE,\n            payload: { sessionId, updates }\n        };\n    },\n    leave(sessionId, leaveTime) {\n        return {\n            action: MessageAction.SESSION_LEAVE,\n            payload: { sessionId, leaveTime }\n        };\n    },\n    return(sessionId, returnTime) {\n        return {\n            action: MessageAction.SESSION_RETURN,\n            payload: { sessionId, returnTime }\n        };\n    },\n    updateActivity(sessionId, activityTime) {\n        return {\n            action: MessageAction.SESSION_UPDATE_ACTIVITY,\n            payload: { sessionId, activityTime }\n        };\n    },\n    addSubmission(sessionId, code, language, status, runtime, errorMessage) {\n        return {\n            action: MessageAction.SUBMISSION_ADD,\n            payload: { sessionId, code, language, status, runtime, errorMessage }\n        };\n    }\n};\n// 数据管理相关消息构建\nMessageBuilder.data = {\n    export(reason, details) {\n        return {\n            action: MessageAction.DATA_EXPORT,\n            payload: {\n                reason,\n                details: Object.assign({ source: details.source, timestamp: Date.now() }, details)\n            }\n        };\n    },\n    import(data, options) {\n        return {\n            action: MessageAction.DATA_IMPORT,\n            payload: { data, options }\n        };\n    },\n    getStats() {\n        return {\n            action: MessageAction.DATA_GET_STATS,\n            payload: undefined\n        };\n    },\n    getSessions() {\n        return {\n            action: MessageAction.DATA_GET_SESSIONS,\n            payload: undefined\n        };\n    },\n    getProblems(problemIds) {\n        return {\n            action: MessageAction.DATA_GET_PROBLEMS,\n            payload: { problemIds }\n        };\n    },\n    updateProblem(problem) {\n        return {\n            action: MessageAction.DATA_PROBLEM_UPDATE,\n            payload: {\n                problem\n            }\n        };\n    }\n};\n// 设置相关消息构建\nMessageBuilder.settings = {\n    get() {\n        return {\n            action: MessageAction.DATA_GET_SETTINGS,\n            payload: undefined\n        };\n    },\n    update(updates) {\n        return {\n            action: MessageAction.DATA_UPDATE_SETTINGS,\n            payload: updates\n        };\n    }\n};\n// 响应构建\nMessageBuilder.response = {\n    success(data) {\n        return {\n            success: true,\n            data\n        };\n    },\n    error(code, message) {\n        return {\n            success: false,\n            error: { code, message }\n        };\n    },\n    unknown(error) {\n        return this.error(MessageErrorCode.UNKNOWN_ERROR, error instanceof Error ? error.message : 'Unknown error occurred');\n    }\n};\n","/**\n * SessionHandler - 会话对象操作工具类\n * 负责处理会话对象的创建和状态转换，不涉及存储操作\n */\nexport class SessionHandler {\n    /**\n     * 创建新的会话对象\n     */\n    createSession(problemId, currentTime) {\n        return {\n            sessionId: this.generateSessionId(),\n            problemId,\n            startTime: currentTime,\n            lastActivityTime: currentTime,\n            leaves: [],\n            submissions: [],\n            createdAt: currentTime,\n            updatedAt: currentTime,\n        };\n    }\n    /**\n     * 添加中断记录\n     */\n    addLeaveRecord(session, leaveTime) {\n        return Object.assign(Object.assign({}, session), { leaves: [\n                ...(session.leaves || []),\n                {\n                    leaveTime,\n                    returnTime: 0,\n                    duration: 0,\n                }\n            ], updatedAt: leaveTime });\n    }\n    /**\n     * 更新中断记录\n     */\n    updateReturnRecord(session, returnTime) {\n        var _a;\n        if (!((_a = session.leaves) === null || _a === void 0 ? void 0 : _a.length))\n            return session;\n        const leaves = [...session.leaves];\n        const lastLeave = leaves[leaves.length - 1];\n        if (lastLeave.returnTime === 0) {\n            lastLeave.returnTime = returnTime;\n            lastLeave.duration = returnTime - lastLeave.leaveTime;\n        }\n        return Object.assign(Object.assign({}, session), { leaves, updatedAt: returnTime });\n    }\n    /**\n     * 更新活动时间\n     */\n    updateActivityTime(session, activityTime) {\n        return Object.assign(Object.assign({}, session), { lastActivityTime: activityTime, updatedAt: activityTime });\n    }\n    /**\n     * 关闭会话\n     */\n    closeSession(session, endTime, endReason) {\n        return Object.assign(Object.assign({}, session), { endTime,\n            endReason, updatedAt: endTime });\n    }\n    /**\n     * 添加提交记录\n     */\n    addSubmission(session, code, language, status, runtime, errorMessage) {\n        const submission = {\n            code,\n            language,\n            status,\n            runtime,\n            errorMessage,\n            timestamp: Date.now(),\n        };\n        const submissions = [...(session.submissions || []), submission];\n        // 更新session\n        const updatedSession = Object.assign(Object.assign({}, session), { submissions, updatedAt: submission.timestamp });\n        // 如果是成功提交且没有firstSuccessTime，设置为当前提交时间\n        if (status === 'success' && !session.firstSuccessTime) {\n            // 如果之前有成功提交，使用最早的成功提交时间\n            const firstSuccessSubmission = submissions.find(s => s.status === 'success');\n            updatedSession.firstSuccessTime = (firstSuccessSubmission === null || firstSuccessSubmission === void 0 ? void 0 : firstSuccessSubmission.timestamp) || submission.timestamp;\n        }\n        return updatedSession;\n    }\n    /**\n     * 生成唯一的 session ID\n     */\n    generateSessionId() {\n        return crypto.randomUUID();\n    }\n}\n","// 存储键名\nexport const STORAGE_KEYS = {\n    ALERT_TIME: 'timer_alert_time',\n    TIMER_POSITION: 'timer_position',\n    UI_LANGUAGE: 'ui_language',\n    SESSIONS: 'sessions',\n    PROBLEM_DETAILS: 'problem_details',\n    METADATA: 'bytebytebunny_metadata',\n    CORE_DATA: 'bytebytebunny_data',\n    USER_SETTINGS: 'bytebytebunny_settings',\n};\nexport const DEFAULT_UI_LANGUAGE = 'en';\n// 计时器相关常量\nexport const TIMER_CONSTANTS = {\n    DEFAULT_ALERT_MINUTES: 10, // 默认提醒时间（分钟）\n    MIN_ALERT_MINUTES: 0, // 最小提醒时间（分钟）\n    MAX_ALERT_MINUTES: 60, // 最大提醒时间（分钟）\n    STEP_MINUTES: 0.5, // 时间调整步长（分钟）\n    FLASH_INTERVAL: 500, // 闪烁间隔（毫秒）\n    FLASH_COUNT: 10, // 闪烁次数（5次来回，共10次变化）\n    SAVE_MESSAGE_DURATION: 2000, // 保存提示显示时间（毫秒）\n    DEFAULT_POSITION: {\n        // 默认位置\n        X_OFFSET: 150, // 距右边距（像素）\n        Y_OFFSET: 10, // 距上边距（像素）\n    },\n};\n// 难度映射\nexport const DIFFICULTY_MAP = {\n    Easy: { zh: '简单', en: 'Easy' },\n    Medium: { zh: '中等', en: 'Medium' },\n    Hard: { zh: '困难', en: 'Hard' },\n};\n/**\n * 艾宾浩斯遗忘曲线复习时间点（小时）\n * 5分钟 - 30分钟 - 12小时 - 1天 - 2天 - 4天 - 7天 - 15天\n */\nexport const REVIEW_INTERVALS = {\n    FIRST: 0.083, // 5分钟\n    SECOND: 0.5, // 30分钟\n    THIRD: 4, // 4小时\n    FOURTH: 24, // 1天\n    FIFTH: 72, // 3天\n    SIXTH: 168, // 7天\n    SEVENTH: 360, // 15天\n    EIGHTH: 720, // 30天\n};\n/**\n * 题目难度相关常量\n */\nexport const PROBLEM_CONSTANTS = {\n    // 难度分布权重\n    DIFFICULTY_DISTRIBUTION: {\n        Easy: 0.15, // 15% 简单题\n        Medium: 0.6, // 60% 中等题\n        Hard: 0.25, // 25% 困难题\n    },\n    // 期望解题时间（毫秒）\n    EXPECTED_SOLVING_TIME: {\n        Easy: {\n            expected: 15 * 60 * 1000, // 15分钟\n            maximum: 30 * 60 * 1000, // 30分钟\n        },\n        Medium: {\n            expected: 30 * 60 * 1000, // 30分钟\n            maximum: 60 * 60 * 1000, // 1小时\n        },\n        Hard: {\n            expected: 60 * 60 * 1000, // 1小时\n            maximum: 120 * 60 * 1000, // 2小时\n        },\n    },\n};\nexport const EVALUATION_CONSTANTS = {\n    RECENT_ACC_THRESHOLD: 0.8,\n    HISTORY_ACC_THRESHOLD: 0.7,\n    HISTORY_FIRST_SOLVE_MINUTES: 25,\n    RECENT_SESSION_DAYS: 15,\n    HISTORY_SESSION_COUNT: 3,\n};\n/**\n * 复习优先级计算权重\n */\nexport const REVIEW_WEIGHTS = {\n    Easy: {\n        timeDeviation: 0.5, // 时间偏差权重\n        failureRate: 0.3, // 失败率权重\n        solvingTime: 0.2, // 解题时间权重\n    },\n    Medium: {\n        timeDeviation: 0.4,\n        failureRate: 0.4,\n        solvingTime: 0.2,\n    },\n    Hard: {\n        timeDeviation: 0.3,\n        failureRate: 0.5,\n        solvingTime: 0.2,\n    },\n};\nexport const OBSERVER_CONSTANTS = {\n    TIMEOUT: 10000\n};\nexport const DATA_VERSION = {\n    CURRENT: 1\n};\nexport const STORAGE_CONSTANTS = {\n    DATA_VERSION: 1,\n    // ... 其他常量\n};\n/**\n * 会话相关常量\n */\nexport const SESSION_CONSTANTS = {\n    // 会话超时时间（毫秒）\n    // 超过此时间未活动的会话视为已超时，不可重用\n    TIMEOUT: 30 * 60 * 1000, // 30分钟\n    // 最小有效活动时间：10秒\n    // 用户需要在页面停留超过这个时间才计算为有效活动\n    MIN_ACTIVITY_DURATION: 10 * 1000,\n    // 活动检测间隔：1秒\n    // 用于定期检查用户是否仍在页面活动\n    ACTIVITY_CHECK_INTERVAL: 1000,\n    // 提交结果等待超时：30秒\n    SUBMISSION_RESULT_TIMEOUT: 30 * 1000,\n    // 提交结果检查间隔：1秒\n    SUBMISSION_CHECK_INTERVAL: 1000,\n};\n/**\n * 复习优先级计算相关常量\n */\nexport const PRIORITY_CONSTANTS = {\n    // 各维度权重\n    WEIGHTS: {\n        TIME_SCORE: 0.4, // 时间维度权重\n        VALUE_SCORE: 0.3, // 题目价值维度权重\n        PERFORMANCE_SCORE: 0.3 // 历史表现维度权重\n    },\n    // 时间分数计算参数\n    TIME_SCORE: {\n        // 错过复习点的最大分数\n        MISSED_MAX_SCORE: 0.8,\n        // 接近复习点的最大分数\n        APPROACHING_MAX_SCORE: 0.6,\n        // 不同阶段的容忍时间（小时）\n        TOLERANCE_HOURS: {\n            FIRST_DAY: 2, // 24小时内\n            THREE_DAYS: 6, // 1-3天\n            LATER: 12 // 3天以上\n        },\n        // 不同阶段的提前量（小时）\n        ADVANCE_HOURS: {\n            FIRST_DAY: 1, // 24小时内\n            THREE_DAYS: 3, // 1-3天\n            LATER: 6 // 3天以上\n        }\n    },\n    // 历史表现计算参数\n    PERFORMANCE: {\n        // 最近表现的时间窗口（天）\n        RECENT_WINDOW_DAYS: 30,\n        // 计算趋势时的最小练习次数\n        MIN_SESSIONS_FOR_TREND: 3,\n        // 练习次数归一化的基准值\n        PRACTICE_COUNT_BASE: 5\n    }\n};\n","/**\n * 日志管理类\n * Logger management class\n */\nexport class Logger {\n    constructor(prefix) {\n        this.logLevel = 'info';\n        this.logCounter = 0;\n        this.lastResetTime = Date.now();\n        this.prefix = prefix;\n    }\n    /**\n     * 设置日志级别\n     * Set log level\n     */\n    setLogLevel(level) {\n        this.logLevel = level;\n    }\n    /**\n     * 输出普通日志\n     * Output normal log\n     */\n    log(message, ...args) {\n        this.logMessage('info', console.log, message, ...args);\n    }\n    /**\n     * 输出错误日志\n     * Output error log\n     */\n    error(message, error) {\n        if (this.shouldLog('error')) {\n            let errorMessage;\n            if (error === null || error === undefined) {\n                errorMessage = '<no error details>';\n            }\n            else if (error instanceof Error) {\n                errorMessage = `${error.message}\\n${error.stack}`;\n            }\n            else {\n                try {\n                    errorMessage = JSON.stringify(error);\n                }\n                catch (e) {\n                    errorMessage = String(error);\n                }\n            }\n            console.error(`${this.prefix} ${getTimestamp()}: ${message}:`, errorMessage);\n        }\n    }\n    /**\n     * 输出调试日志\n     * Output debug log\n     */\n    debug(message, ...args) {\n        this.logMessage('debug', console.debug, message, ...args);\n    }\n    /**\n     * 检查是否应该输出日志\n     * Check if should output log\n     */\n    shouldLog(minLevel) {\n        return Logger.LOG_LEVELS.indexOf(this.logLevel) <= Logger.LOG_LEVELS.indexOf(minLevel);\n    }\n    /**\n     * 输出警告日志\n     * Output warning log\n     */\n    warn(message, ...args) {\n        this.logMessage('info', console.warn, message, ...args);\n    }\n    /**\n     * 输出信息日志\n     * Output info log\n     */\n    info(message, ...args) {\n        this.logMessage('info', console.info, message, ...args);\n    }\n    /**\n     * 统一的日志输出方法\n     */\n    logMessage(level, consoleMethod, message, ...args) {\n        if (this.shouldLog(level) && !this.shouldThrottle()) {\n            consoleMethod(`${this.prefix} ${getTimestamp()}: ${message}`, ...args);\n        }\n    }\n    shouldThrottle() {\n        const now = Date.now();\n        if (now - this.lastResetTime >= Logger.THROTTLE_INTERVAL) {\n            this.logCounter = 0;\n            this.lastResetTime = now;\n            return false;\n        }\n        this.logCounter++;\n        return this.logCounter > Logger.MAX_LOGS_PER_INTERVAL;\n    }\n}\nLogger.LOG_LEVELS = ['debug', 'info', 'error'];\nLogger.THROTTLE_INTERVAL = 1000; // 1秒内最多输出的日志数\nLogger.MAX_LOGS_PER_INTERVAL = 100;\n/**\n * 日志工厂类\n * Logger factory class\n * 管理不同模块的Logger实例\n */\nexport class LoggerFactory {\n    constructor() {\n        this.loggers = new Map();\n        this.defaultPrefix = 'BBBunny';\n        this.SEPARATOR = ':';\n    }\n    /**\n     * 获取LoggerFactory实例\n     * Get LoggerFactory instance\n     */\n    static getInstance() {\n        if (!LoggerFactory.instance) {\n            LoggerFactory.instance = new LoggerFactory();\n        }\n        return LoggerFactory.instance;\n    }\n    /**\n     * 设置默认前缀\n     * Set default prefix\n     */\n    setDefaultPrefix(prefix) {\n        this.defaultPrefix = prefix;\n    }\n    /**\n     * 获取指定模块的Logger\n     * Get Logger for specific module\n     * @param module 模块路径，可以是多级，如 ['ContentScript', 'Timer']\n     */\n    getLogger(module) {\n        const modulePath = Array.isArray(module) ? module : [module];\n        const loggerKey = modulePath.join(this.SEPARATOR);\n        const fullPrefix = `${this.defaultPrefix}${this.SEPARATOR}${loggerKey}`;\n        if (!this.loggers.has(loggerKey)) {\n            this.loggers.set(loggerKey, new Logger(fullPrefix));\n        }\n        return this.loggers.get(loggerKey);\n    }\n    /**\n     * 设置全局日志级别\n     * Set global log level\n     */\n    setGlobalLogLevel(level) {\n        this.loggers.forEach(logger => logger.setLogLevel(level));\n    }\n}\nfunction getTimestamp() {\n    const now = new Date();\n    return `[${now.toLocaleString()}]`;\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { MessageErrorCode } from '../types/message';\nimport { MessageBuilder } from '../types/message-builder';\nimport { STORAGE_KEYS, TIMER_CONSTANTS, DEFAULT_UI_LANGUAGE, STORAGE_CONSTANTS, SESSION_CONSTANTS } from '../constants';\nimport { LoggerFactory } from '../utils/logger';\n/**\n * DataManager 负责管理扩展的所有数据存储操作\n * - 管理元数据、核心数据和用户设置\n * - 提供数据的 CRUD 操作\n * - 维护存储统计信息\n * - 提供数据清理功能\n */\nexport class DataManager {\n    constructor() {\n        this.operationLock = false;\n        this.operationQueue = Promise.resolve();\n        this.currentMetadata = null;\n        this.currentData = null;\n        this.currentSettings = null;\n        this.logger = LoggerFactory.getInstance().getLogger('DataManager');\n    }\n    static getInstance() {\n        if (!DataManager.instance) {\n            DataManager.instance = new DataManager();\n        }\n        return DataManager.instance;\n    }\n    // 公共数据访问接口\n    getData() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._getData();\n        });\n    }\n    getMetadata() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._getMetadata();\n        });\n    }\n    getSettings() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._getSettings();\n        });\n    }\n    getSession(sessionId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = yield this.getData();\n            return data.sessions.find(s => s.sessionId === sessionId) || null;\n        });\n    }\n    findReusableSession(problemId, currentTime) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = yield this.getData();\n            // 查找符合条件的会话：\n            // 1. 同一道题目\n            // 2. 最后活动时间在超时时间范围内\n            const reusableSession = Object.values(data.sessions).find(session => {\n                const isMatchingProblem = session.problemId === problemId;\n                const lastActivityTime = session.lastActivityTime || session.startTime;\n                const isNotTimedOut = (currentTime - lastActivityTime) < SESSION_CONSTANTS.TIMEOUT;\n                return isMatchingProblem && isNotTimedOut;\n            });\n            if (reusableSession) {\n                this.logger.debug('Found reusable session:', {\n                    sessionId: reusableSession.sessionId,\n                    problemId,\n                    startTime: new Date(reusableSession.startTime).toLocaleString(),\n                    lastActivityTime: new Date(reusableSession.lastActivityTime || reusableSession.startTime).toLocaleString()\n                });\n            }\n            return reusableSession || null;\n        });\n    }\n    // 数据更新接口\n    updateSession(session) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.logger.debug('Updating session:', { sessionId: session.sessionId });\n            this.operationQueue = this.operationQueue.then(() => __awaiter(this, void 0, void 0, function* () {\n                if (this.operationLock) {\n                    const error = new Error('Another operation is in progress');\n                    this.logger.error('Update session failed:', error);\n                    throw error;\n                }\n                try {\n                    this.operationLock = true;\n                    const data = yield this.getData();\n                    const metadata = yield this.getMetadata();\n                    const index = data.sessions.findIndex(s => s.sessionId === session.sessionId);\n                    if (index >= 0) {\n                        data.sessions[index] = session;\n                        this.logger.debug('Updated existing session');\n                    }\n                    else {\n                        data.sessions.push(session);\n                        metadata.totalSessions = data.sessions.length;\n                        this.logger.debug('Added new session');\n                    }\n                    metadata.lastUpdateTime = Date.now();\n                    yield Promise.all([\n                        this.storageSet({ [STORAGE_KEYS.CORE_DATA]: data }),\n                        this.storageSet({ [STORAGE_KEYS.METADATA]: metadata })\n                    ]);\n                    // 更新缓存\n                    this.currentData = data;\n                    this.currentMetadata = metadata;\n                    // 更新存储统计并返回结果\n                    const stats = yield this.updateStorageUsage();\n                    this.logger.info('Session update completed');\n                    return stats;\n                }\n                catch (error) {\n                    this.logger.error('Failed to update session:', error);\n                    throw error;\n                }\n                finally {\n                    this.operationLock = false;\n                }\n            }));\n            return yield this.operationQueue;\n        });\n    }\n    updateProblem(problemId, problem) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.operationQueue = this.operationQueue.then(() => __awaiter(this, void 0, void 0, function* () {\n                if (this.operationLock) {\n                    throw new Error('Another operation is in progress');\n                }\n                try {\n                    this.operationLock = true;\n                    const data = yield this.getData();\n                    const metadata = yield this.getMetadata();\n                    data.problems[problemId] = problem;\n                    metadata.totalProblems = Object.keys(data.problems).length;\n                    metadata.lastUpdateTime = Date.now();\n                    yield Promise.all([\n                        this.storageSet({ [STORAGE_KEYS.CORE_DATA]: data }),\n                        this.storageSet({ [STORAGE_KEYS.METADATA]: metadata })\n                    ]);\n                    // 更新缓存\n                    this.currentData = data;\n                    this.currentMetadata = metadata;\n                    // 更新存储统计并返回结果\n                    return yield this.updateStorageUsage();\n                }\n                finally {\n                    this.operationLock = false;\n                }\n            }));\n            return yield this.operationQueue;\n        });\n    }\n    updateUserSettings(updates) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const currentSettings = yield this.getSettings();\n                const updatedSettings = Object.assign(Object.assign({}, currentSettings), updates);\n                yield this.storageSet({ [STORAGE_KEYS.USER_SETTINGS]: updatedSettings });\n                this.currentSettings = updatedSettings;\n                return MessageBuilder.response.success(updatedSettings);\n            }\n            catch (error) {\n                this.logger.error('Failed to update user settings:', error);\n                return MessageBuilder.response.error(MessageErrorCode.DATA_SETTINGS_UPDATE_ERROR, error instanceof Error ? error.message : '更新设置时发生未知错误');\n            }\n        });\n    }\n    // 数据维护接口\n    cleanupOldData(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.operationQueue = this.operationQueue.then(() => __awaiter(this, void 0, void 0, function* () {\n                if (this.operationLock) {\n                    throw new Error('Another operation is in progress');\n                }\n                try {\n                    this.operationLock = true;\n                    const data = yield this.getData();\n                    const metadata = yield this.getMetadata();\n                    if (options.olderThan) {\n                        const cutoffTime = Date.now() - (options.olderThan * 24 * 60 * 60 * 1000);\n                        data.sessions = data.sessions.filter(session => session.updatedAt > cutoffTime);\n                    }\n                    if (options.keepLastN) {\n                        data.sessions.forEach(session => {\n                            var _a;\n                            if (((_a = session.submissions) === null || _a === void 0 ? void 0 : _a.length) > options.keepLastN) {\n                                session.submissions = session.submissions.slice(-options.keepLastN);\n                            }\n                        });\n                    }\n                    metadata.totalSessions = data.sessions.length;\n                    metadata.lastUpdateTime = Date.now();\n                    yield Promise.all([\n                        this.storageSet({ [STORAGE_KEYS.CORE_DATA]: data }),\n                        this.storageSet({ [STORAGE_KEYS.METADATA]: metadata })\n                    ]);\n                    // 更新缓存\n                    this.currentData = data;\n                    this.currentMetadata = metadata;\n                    // 更新存储统计\n                    yield this.updateStorageUsage();\n                }\n                finally {\n                    this.operationLock = false;\n                }\n            }));\n            yield this.operationQueue;\n        });\n    }\n    updateStorageUsage() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.logger.debug('Updating storage usage statistics...');\n            const [data, settings, metadata] = yield Promise.all([\n                this.getData(),\n                this.getSettings(),\n                this.getMetadata()\n            ]);\n            // 计算各部分数据大小\n            const sessionsSize = new Blob([JSON.stringify(data.sessions)]).size;\n            const problemsSize = new Blob([JSON.stringify(data.problems)]).size;\n            const settingsSize = new Blob([JSON.stringify(settings)]).size;\n            const metadataSize = new Blob([JSON.stringify(metadata)]).size;\n            const totalSize = new Blob([JSON.stringify({ data, settings, metadata })]).size;\n            // 获取存储配额信息\n            const { QUOTA_BYTES } = chrome.storage.local;\n            // 构建存储使用统计\n            const usageStats = {\n                quota: {\n                    total: QUOTA_BYTES,\n                    used: totalSize,\n                    remaining: QUOTA_BYTES - totalSize,\n                    usagePercentage: (totalSize / QUOTA_BYTES) * 100\n                },\n                details: {\n                    sessions: {\n                        size: sessionsSize,\n                        count: data.sessions.length\n                    },\n                    problems: {\n                        size: problemsSize,\n                        count: Object.keys(data.problems).length\n                    },\n                    settings: {\n                        size: settingsSize\n                    },\n                    metadata: {\n                        size: metadataSize\n                    },\n                    total: totalSize\n                },\n                lastCheck: Date.now()\n            };\n            // 更新元数据中的存储信息\n            metadata.storage = {\n                sessionsSize,\n                problemsSize,\n                settingsSize,\n                dataSize: new Blob([JSON.stringify(data)]).size,\n                totalSize,\n                lastCheck: usageStats.lastCheck\n            };\n            yield this.storageSet({ [STORAGE_KEYS.METADATA]: metadata });\n            this.currentMetadata = metadata;\n            this.logger.debug('Storage usage updated:', usageStats);\n            return MessageBuilder.response.success(usageStats);\n        });\n    }\n    // 数据导入导出接口\n    exportData(reason_1) {\n        return __awaiter(this, arguments, void 0, function* (reason, details = null) {\n            this.logger.debug('Exporting data:', { reason, details });\n            try {\n                const [data, metadata, settings] = yield Promise.all([\n                    this.getData(),\n                    this.getMetadata(),\n                    this.getSettings()\n                ]);\n                return {\n                    metadata,\n                    data,\n                    settings,\n                    backupTime: Date.now(),\n                    backupReason: {\n                        reason,\n                        details\n                    }\n                };\n            }\n            catch (error) {\n                this.logger.error('Failed to export data:', { reason, details, error });\n                throw error;\n            }\n        });\n    }\n    importData(importData_1) {\n        return __awaiter(this, arguments, void 0, function* (importData, options = {}) {\n            this.logger.info('Starting data import:', {\n                version: importData.metadata.version,\n                backupTime: new Date(importData.backupTime).toISOString()\n            });\n            try {\n                // 验证导入数据的格式和版本\n                if (!this.validateImportData(importData)) {\n                    throw new Error('Invalid import data format');\n                }\n                // 开始导入过程\n                yield this.operationQueue.then(() => __awaiter(this, void 0, void 0, function* () {\n                    if (this.operationLock) {\n                        throw new Error('Another operation is in progress');\n                    }\n                    try {\n                        this.operationLock = true;\n                        // 获取当前数据\n                        const currentData = yield this.getData();\n                        // 根据合并策略处理数据\n                        if (options.mergeStrategy === 'overwrite') {\n                            // 完全覆盖现有数据\n                            currentData.sessions = importData.data.sessions;\n                            currentData.problems = importData.data.problems;\n                        }\n                        else if (options.mergeStrategy === 'smart-merge') {\n                            // 智能合并：保留最新的数据\n                            currentData.sessions = this.mergeSessions(currentData.sessions, importData.data.sessions);\n                            currentData.problems = this.mergeProblems(currentData.problems, importData.data.problems);\n                        }\n                        // 'keep-existing' 策略下不做任何改变\n                        // 更新设置（如果需要）\n                        if (options.overwriteSettings) {\n                            yield this.storageSet({\n                                [STORAGE_KEYS.USER_SETTINGS]: importData.settings\n                            });\n                            this.currentSettings = importData.settings;\n                        }\n                        // 保存新后的数据\n                        yield this.storageSet({ [STORAGE_KEYS.CORE_DATA]: currentData });\n                        this.currentData = currentData;\n                        // 更新元数据\n                        const metadata = yield this.getMetadata();\n                        metadata.totalSessions = currentData.sessions.length;\n                        metadata.totalProblems = Object.keys(currentData.problems).length;\n                        metadata.lastUpdateTime = Date.now();\n                        yield this.storageSet({ [STORAGE_KEYS.METADATA]: metadata });\n                        this.currentMetadata = metadata;\n                        // 更新存储统计\n                        yield this.updateStorageUsage();\n                    }\n                    finally {\n                        this.operationLock = false;\n                    }\n                }));\n                this.logger.info('Import completed successfully');\n                return true;\n            }\n            catch (error) {\n                this.logger.error('Import failed:', error);\n                return false;\n            }\n        });\n    }\n    mergeSessions(current, imported) {\n        const sessionMap = new Map();\n        // 先添加当前的会话\n        current.forEach(session => sessionMap.set(session.sessionId, session));\n        // 合并导入的会话，如果更新时间更新则覆盖\n        imported.forEach(session => {\n            const existing = sessionMap.get(session.sessionId);\n            if (!existing || session.updatedAt > existing.updatedAt) {\n                sessionMap.set(session.sessionId, session);\n            }\n        });\n        return Array.from(sessionMap.values());\n    }\n    mergeProblems(current, imported) {\n        const result = Object.assign({}, current);\n        for (const [id, problem] of Object.entries(imported)) {\n            if (!result[id] || problem.lastUpdated > result[id].lastUpdated) {\n                result[id] = problem;\n            }\n        }\n        return result;\n    }\n    // 私有实现\n    _getData() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.currentData) {\n                const result = yield this.storageGet(STORAGE_KEYS.CORE_DATA);\n                if (result[STORAGE_KEYS.CORE_DATA]) {\n                    this.currentData = result[STORAGE_KEYS.CORE_DATA];\n                    if (this.currentData) {\n                        this.logger.debug('Loaded existing data:', {\n                            sessionsCount: this.currentData.sessions.length,\n                            problemsCount: Object.keys(this.currentData.problems).length\n                        });\n                    }\n                }\n                else {\n                    this.currentData = yield this.initializeData();\n                    this.logger.debug('Initialized new data');\n                }\n            }\n            return this.currentData;\n        });\n    }\n    _getMetadata() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.currentMetadata) {\n                const result = yield this.storageGet(STORAGE_KEYS.METADATA);\n                this.currentMetadata = result[STORAGE_KEYS.METADATA] || null;\n                if (this.currentMetadata != null) {\n                    yield this.checkVersion(this.currentMetadata);\n                    this.logger.debug('Loaded existing metadata');\n                }\n                else {\n                    this.currentMetadata = yield this.initializeMetadata();\n                    this.logger.debug('Initialized new metadata');\n                }\n            }\n            return this.currentMetadata;\n        });\n    }\n    _getSettings() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.currentSettings) {\n                const result = yield this.storageGet(STORAGE_KEYS.USER_SETTINGS);\n                if (result[STORAGE_KEYS.USER_SETTINGS]) {\n                    this.currentSettings = result[STORAGE_KEYS.USER_SETTINGS];\n                    this.logger.debug('Loaded existing settings');\n                }\n                else {\n                    this.currentSettings = yield this.initializeSettings();\n                    this.logger.debug('Initialized new settings');\n                }\n            }\n            return this.currentSettings;\n        });\n    }\n    // 私有工具方法\n    storageGet(key) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                return yield chrome.storage.local.get(key);\n            }\n            catch (error) {\n                this.logger.error('Failed to get data from storage:', { key, error });\n                throw error;\n            }\n        });\n    }\n    storageSet(items) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                yield chrome.storage.local.set(items);\n                this.logger.debug('Data saved to storage:', { keys: Object.keys(items) });\n            }\n            catch (error) {\n                this.logger.error('Failed to save data to storage:', { items, error });\n                throw error;\n            }\n        });\n    }\n    checkVersion(metadata) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const currentVersion = DataManager.getExtensionVersion();\n            const currentDataVersion = STORAGE_CONSTANTS.DATA_VERSION;\n            const isMatch = metadata.dataVersion === currentDataVersion;\n            this.logger.info('Version check:', {\n                extension: {\n                    current: currentVersion,\n                    stored: metadata.version\n                },\n                data: {\n                    current: currentDataVersion,\n                    stored: metadata.dataVersion,\n                    isMatch\n                }\n            });\n            if (!isMatch) {\n                this.logger.warn('Data version mismatch detected');\n            }\n            return isMatch;\n        });\n    }\n    static getExtensionVersion() {\n        return chrome.runtime.getManifest().version;\n    }\n    validateImportData(data) {\n        // 基本结构验证\n        if (!data || !data.metadata || !data.data || !data.settings) {\n            this.logger.error('Missing required data sections', null);\n            return false;\n        }\n        // 版本兼容性检查\n        const currentVersion = STORAGE_CONSTANTS.DATA_VERSION;\n        if (data.metadata.dataVersion !== currentVersion) {\n            this.logger.warn('Data version mismatch:', {\n                imported: data.metadata.dataVersion,\n                current: currentVersion\n            });\n            // 这里可以根据需要决定是否允许导入不同版本的数据\n            // return false;\n        }\n        // 数据完整性验证\n        if (!Array.isArray(data.data.sessions) ||\n            typeof data.data.problems !== 'object') {\n            this.logger.error('Invalid data structure', null);\n            return false;\n        }\n        return true;\n    }\n    // 初始化函数\n    initializeMetadata() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.logger.info('Initializing metadata...');\n            const metadata = {\n                version: DataManager.getExtensionVersion(),\n                dataVersion: STORAGE_CONSTANTS.DATA_VERSION,\n                lastUpdateTime: Date.now(),\n                totalSessions: 0,\n                totalProblems: 0,\n                storage: {\n                    sessionsSize: 0,\n                    problemsSize: 0,\n                    settingsSize: 0,\n                    dataSize: 0,\n                    totalSize: 0,\n                    lastCheck: Date.now()\n                }\n            };\n            yield this.storageSet({ [STORAGE_KEYS.METADATA]: metadata });\n            return metadata;\n        });\n    }\n    initializeData() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.logger.info('Initializing core data...');\n            const data = {\n                sessions: [],\n                problems: {}\n            };\n            yield this.storageSet({ [STORAGE_KEYS.CORE_DATA]: data });\n            return data;\n        });\n    }\n    initializeSettings() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.logger.info('Initializing user settings...');\n            const settings = {\n                alertTime: TIMER_CONSTANTS.DEFAULT_ALERT_MINUTES,\n                uiLanguage: DEFAULT_UI_LANGUAGE\n            };\n            yield this.storageSet({ [STORAGE_KEYS.USER_SETTINGS]: settings });\n            return settings;\n        });\n    }\n    /**\n     * 清除所有数据\n     */\n    clearAllData() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.logger.debug('Starting to clear all data...');\n            try {\n                // 初始化新的空数据\n                const newData = yield this.initializeData();\n                const newMetadata = yield this.initializeMetadata();\n                // 保存空数据\n                yield Promise.all([\n                    this.storageSet({ [STORAGE_KEYS.CORE_DATA]: newData }),\n                    this.storageSet({ [STORAGE_KEYS.METADATA]: newMetadata })\n                ]);\n                // 更新缓存\n                this.currentData = newData;\n                this.currentMetadata = newMetadata;\n                // 更新存储统计\n                yield this.updateStorageUsage();\n                this.logger.info('All data cleared successfully');\n                return MessageBuilder.response.success();\n            }\n            catch (error) {\n                this.logger.error('Failed to clear all data:', error);\n                return MessageBuilder.response.error(MessageErrorCode.DATA_CLEAR_ERROR, error instanceof Error ? error.message : '清除数据时发生未知错误');\n            }\n        });\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n// src/background/index.ts\nimport { MessageAction, MessageErrorCode } from '../types/message';\nimport { MessageBuilder } from '../types/message-builder';\nimport { SessionHandler } from './session-handler';\nimport { DataManager } from './data-manager';\nimport { LoggerFactory } from '../utils/logger';\nclass BackgroundService {\n    constructor() {\n        this.sessionHandler = new SessionHandler();\n        this.dataManager = DataManager.getInstance();\n        this.logger = LoggerFactory.getInstance().getLogger('Background');\n        this.logger.info('BackgroundService initialized');\n        this.initialize();\n    }\n    initialize() {\n        this.logger.info('Setting up message listener');\n        chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n            this.logger.info('Message received:', {\n                action: request.action,\n                sender: sender.id,\n                timestamp: new Date().toISOString()\n            });\n            // 统一使用 handleMessage 处理所有消息\n            this.handleMessage(request)\n                .then(sendResponse)\n                .catch((error) => {\n                this.logger.error('Error handling message:', error);\n                sendResponse(MessageBuilder.response.unknown(error));\n            });\n            return true; // 保持消息通道开放以支持异步响应\n        });\n    }\n    handleMessage(request) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                this.logger.debug('Received message:', request);\n                switch (request.action) {\n                    // Session 相关操作\n                    case MessageAction.SESSION_START: {\n                        this.logger.debug('Handling SESSION_START');\n                        const { problem, currentTime } = request.payload;\n                        // 查找可重用的会话\n                        const existingSession = yield this.dataManager.findReusableSession(problem.id, currentTime);\n                        if (existingSession) {\n                            // 清除之前的结束状态，重新激活会话\n                            const reactivatedSession = Object.assign(Object.assign({}, existingSession), { endTime: undefined, endReason: undefined, lastActivityTime: currentTime, updatedAt: currentTime });\n                            // 更新会话状态\n                            yield this.dataManager.updateSession(reactivatedSession);\n                            this.logger.info('Reusing and reactivating session:', {\n                                sessionId: existingSession.sessionId,\n                                problemId: problem.id\n                            });\n                            return MessageBuilder.response.success(reactivatedSession);\n                        }\n                        // 如果没有可重用的会话，创建新会话\n                        const newSession = this.sessionHandler.createSession(problem.id, currentTime);\n                        yield this.dataManager.updateSession(newSession);\n                        this.logger.debug('New session created:', { sessionId: newSession.sessionId });\n                        return MessageBuilder.response.success(newSession);\n                    }\n                    case MessageAction.SESSION_END: {\n                        const { sessionId, endTime, endReason } = request.payload;\n                        const currentSession = yield this.dataManager.getSession(sessionId);\n                        if (!currentSession) {\n                            return MessageBuilder.response.error(MessageErrorCode.SESSION_NOT_FOUND, 'Session not found');\n                        }\n                        const updatedSession = this.sessionHandler.closeSession(currentSession, endTime, endReason);\n                        yield this.dataManager.updateSession(updatedSession);\n                        return MessageBuilder.response.success();\n                    }\n                    case MessageAction.SESSION_LEAVE: {\n                        this.logger.debug('Handling SESSION_LEAVE');\n                        const { sessionId, leaveTime } = request.payload;\n                        // 获取当前会话\n                        const currentSession = yield this.dataManager.getSession(sessionId);\n                        if (!currentSession) {\n                            this.logger.warn('Session not found:', { sessionId });\n                            return MessageBuilder.response.error(MessageErrorCode.SESSION_NOT_FOUND, 'Session not found');\n                        }\n                        const updatedSession = this.sessionHandler.updateReturnRecord(currentSession, leaveTime);\n                        yield this.dataManager.updateSession(updatedSession);\n                        this.logger.debug('Session leave record updated:', { sessionId });\n                        return MessageBuilder.response.success();\n                    }\n                    case MessageAction.SESSION_UPDATE_ACTIVITY: {\n                        this.logger.debug('Handling SESSION_UPDATE_ACTIVITY');\n                        const { sessionId, activityTime } = request.payload;\n                        const currentSession = yield this.dataManager.getSession(sessionId);\n                        if (!currentSession) {\n                            this.logger.warn('Session not found:', { sessionId });\n                            return MessageBuilder.response.error(MessageErrorCode.SESSION_NOT_FOUND, 'Session not found');\n                        }\n                        const updatedSession = this.sessionHandler.updateActivityTime(currentSession, activityTime);\n                        yield this.dataManager.updateSession(updatedSession);\n                        this.logger.debug('Session activity time updated:', { sessionId, activityTime });\n                        return MessageBuilder.response.success();\n                    }\n                    case MessageAction.SESSION_UPDATE: {\n                        this.logger.debug('Handling SESSION_UPDATE');\n                        const { sessionId, updates } = request.payload;\n                        const currentSession = yield this.dataManager.getSession(sessionId);\n                        if (!currentSession) {\n                            this.logger.warn('Session not found:', { sessionId });\n                            return MessageBuilder.response.error(MessageErrorCode.SESSION_NOT_FOUND, 'Session not found');\n                        }\n                        const updatedSession = Object.assign(Object.assign({}, currentSession), updates);\n                        yield this.dataManager.updateSession(updatedSession);\n                        this.logger.debug('Session updated:', { sessionId });\n                        return MessageBuilder.response.success(updatedSession);\n                    }\n                    case MessageAction.SESSION_RETURN: {\n                        this.logger.debug('Handling SESSION_RETURN');\n                        const { sessionId, returnTime } = request.payload;\n                        const currentSession = yield this.dataManager.getSession(sessionId);\n                        if (!currentSession) {\n                            this.logger.warn('Session not found:', { sessionId });\n                            return MessageBuilder.response.error(MessageErrorCode.SESSION_NOT_FOUND, 'Session not found');\n                        }\n                        const updatedSession = this.sessionHandler.updateReturnRecord(currentSession, returnTime);\n                        yield this.dataManager.updateSession(updatedSession);\n                        this.logger.debug('Session return record updated:', { sessionId });\n                        return MessageBuilder.response.success();\n                    }\n                    case MessageAction.SUBMISSION_ADD: {\n                        const { sessionId, code, language, status, runtime, errorMessage } = request.payload;\n                        const currentSession = yield this.dataManager.getSession(sessionId);\n                        if (!currentSession) {\n                            return MessageBuilder.response.error(MessageErrorCode.SESSION_NOT_FOUND, 'Session not found');\n                        }\n                        const updatedSession = this.sessionHandler.addSubmission(currentSession, code, language, status, runtime, errorMessage);\n                        yield this.dataManager.updateSession(updatedSession);\n                        return MessageBuilder.response.success();\n                    }\n                    // 数据管理操作\n                    case MessageAction.DATA_CLEAR_ALL:\n                        return yield this.dataManager.clearAllData();\n                    case MessageAction.DATA_EXPORT:\n                        return yield this.handleBackup(request.payload);\n                    case MessageAction.DATA_IMPORT:\n                        return yield this.handleImport(request.payload);\n                    case MessageAction.DATA_GET_STATS:\n                        return yield this.dataManager.updateStorageUsage();\n                    // 数据查询\n                    case MessageAction.DATA_GET_SESSIONS:\n                        return yield MessageBuilder.wrap(() => __awaiter(this, void 0, void 0, function* () {\n                            const data = yield this.dataManager.getData();\n                            return data.sessions;\n                        }));\n                    case MessageAction.DATA_GET_PROBLEMS:\n                        return yield MessageBuilder.wrap(() => __awaiter(this, void 0, void 0, function* () {\n                            const data = yield this.dataManager.getData();\n                            const { problemIds } = request.payload;\n                            return Object.entries(data.problems)\n                                .filter(([id]) => problemIds.includes(id))\n                                .reduce((acc, [id, problem]) => (Object.assign(Object.assign({}, acc), { [id]: problem })), {});\n                        }));\n                    case MessageAction.DATA_GET_SETTINGS:\n                        return yield MessageBuilder.wrap(() => __awaiter(this, void 0, void 0, function* () {\n                            return yield this.dataManager.getSettings();\n                        }));\n                    case MessageAction.DATA_UPDATE_SETTINGS:\n                        return yield this.dataManager.updateUserSettings(request.payload);\n                    case MessageAction.DATA_PROBLEM_UPDATE: {\n                        this.logger.debug('Handling DATA_PROBLEM_UPDATE');\n                        const { problem } = request.payload;\n                        try {\n                            yield this.dataManager.updateProblem(problem.id, problem);\n                            this.logger.debug('Problem updated successfully:', { problemId: problem.id });\n                            return MessageBuilder.response.success();\n                        }\n                        catch (error) {\n                            this.logger.error('Failed to update problem:', { problemId: problem.id, error });\n                            return MessageBuilder.response.error(MessageErrorCode.DATA_PROBLEM_UPDATE_ERROR, 'Failed to update problem data');\n                        }\n                    }\n                    default:\n                        this.logger.warn('Unknown message action:', { action: request.action });\n                        return MessageBuilder.response.error(MessageErrorCode.UNKNOWN_ERROR, `Unknown message action: ${request.action}`);\n                }\n            }\n            catch (error) {\n                this.logger.error('Message handling failed:', error);\n                return MessageBuilder.response.unknown(error);\n            }\n        });\n    }\n    handleBackup(payload) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const backup = yield this.dataManager.exportData(payload.reason, payload.details);\n                return MessageBuilder.response.success(backup);\n            }\n            catch (error) {\n                this.logger.error('Failed to create backup:', error);\n                return MessageBuilder.response.error(MessageErrorCode.DATA_EXPORT_ERROR, 'Failed to create backup');\n            }\n        });\n    }\n    handleImport(payload) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield MessageBuilder.wrap(() => __awaiter(this, void 0, void 0, function* () { return yield this.dataManager.importData(payload.data, payload.options); }));\n        });\n    }\n}\n// 初始化后台服务\nnew BackgroundService();\n"],"names":["MessageAction","MessageErrorCode","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","MessageBuilder","wrap","operation_1","this","arguments","operation","errorCode","UNKNOWN_ERROR","response","success","error","Error","message","session","start","problem","currentTime","action","SESSION_START","payload","end","sessionId","endTime","endReason","SESSION_END","update","updates","SESSION_UPDATE","leave","leaveTime","SESSION_LEAVE","return","returnTime","SESSION_RETURN","updateActivity","activityTime","SESSION_UPDATE_ACTIVITY","addSubmission","code","language","status","runtime","errorMessage","SUBMISSION_ADD","data","export","reason","details","DATA_EXPORT","Object","assign","source","timestamp","Date","now","import","options","DATA_IMPORT","getStats","DATA_GET_STATS","undefined","getSessions","DATA_GET_SESSIONS","getProblems","problemIds","DATA_GET_PROBLEMS","updateProblem","DATA_PROBLEM_UPDATE","settings","get","DATA_GET_SETTINGS","DATA_UPDATE_SETTINGS","unknown","SessionHandler","createSession","problemId","generateSessionId","startTime","lastActivityTime","leaves","submissions","createdAt","updatedAt","addLeaveRecord","duration","updateReturnRecord","_a","length","lastLeave","updateActivityTime","closeSession","submission","updatedSession","firstSuccessTime","firstSuccessSubmission","find","s","crypto","randomUUID","STORAGE_KEYS","TIMER_CONSTANTS","STORAGE_CONSTANTS","SESSION_CONSTANTS","Logger","constructor","prefix","logLevel","logCounter","lastResetTime","setLogLevel","level","log","args","logMessage","console","shouldLog","stack","JSON","stringify","String","debug","minLevel","LOG_LEVELS","indexOf","warn","info","consoleMethod","shouldThrottle","toLocaleString","THROTTLE_INTERVAL","MAX_LOGS_PER_INTERVAL","LoggerFactory","loggers","Map","defaultPrefix","SEPARATOR","getInstance","instance","setDefaultPrefix","getLogger","module","loggerKey","Array","isArray","join","fullPrefix","has","set","setGlobalLogLevel","forEach","logger","DataManager","operationLock","operationQueue","currentMetadata","currentData","currentSettings","getData","_getData","getMetadata","_getMetadata","getSettings","_getSettings","getSession","sessions","findReusableSession","reusableSession","values","isMatchingProblem","updateSession","metadata","index","findIndex","push","totalSessions","lastUpdateTime","all","storageSet","stats","updateStorageUsage","problems","totalProblems","keys","updateUserSettings","updatedSettings","DATA_SETTINGS_UPDATE_ERROR","cleanupOldData","olderThan","cutoffTime","filter","keepLastN","slice","sessionsSize","Blob","size","problemsSize","settingsSize","metadataSize","totalSize","QUOTA_BYTES","chrome","storage","local","usageStats","quota","total","used","remaining","usagePercentage","count","lastCheck","dataSize","exportData","reason_1","backupTime","backupReason","importData","importData_1","version","toISOString","validateImportData","mergeStrategy","mergeSessions","mergeProblems","overwriteSettings","current","imported","sessionMap","existing","from","id","entries","lastUpdated","storageGet","sessionsCount","problemsCount","initializeData","checkVersion","initializeMetadata","initializeSettings","key","items","currentVersion","getExtensionVersion","currentDataVersion","isMatch","dataVersion","extension","stored","getManifest","alertTime","uiLanguage","clearAllData","newData","newMetadata","DATA_CLEAR_ERROR","sessionHandler","dataManager","initialize","onMessage","addListener","request","sender","sendResponse","handleMessage","catch","existingSession","reactivatedSession","newSession","currentSession","SESSION_NOT_FOUND","DATA_CLEAR_ALL","handleBackup","handleImport","includes","reduce","acc","DATA_PROBLEM_UPDATE_ERROR","backup","DATA_EXPORT_ERROR"],"sourceRoot":""}