{"version":3,"file":"content.js","mappings":"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","sources":["webpack://bytebytebunny/./src/types/session.ts","webpack://bytebytebunny/./src/constants/index.ts","webpack://bytebytebunny/./src/content/submission-handler-en.ts","webpack://bytebytebunny/./src/content/submission-handler-zh.ts","webpack://bytebytebunny/./src/types/message.ts","webpack://bytebytebunny/./src/utils/logger.ts","webpack://bytebytebunny/./src/types/message-builder.ts","webpack://bytebytebunny/./src/content/session-manager.ts","webpack://bytebytebunny/./src/content/problem-extractor.ts","webpack://bytebytebunny/./src/content/timer.ts","webpack://bytebytebunny/./src/config/index.ts","webpack://bytebytebunny/./src/content/index.ts"],"sourcesContent":["// src/types/session.ts\n/**\n * 会话结束的原因\n */\nexport var SessionEndReason;\n(function (SessionEndReason) {\n    // 用户手动结束会话\n    SessionEndReason[\"MANUAL\"] = \"manual\";\n    // 会话超时自动结束\n    SessionEndReason[\"TIMEOUT\"] = \"timeout\";\n})(SessionEndReason || (SessionEndReason = {}));\n","// 存储键名\nexport const STORAGE_KEYS = {\n    ALERT_TIME: 'timer_alert_time',\n    TIMER_POSITION: 'timer_position',\n    UI_LANGUAGE: 'ui_language',\n    SESSIONS: 'sessions',\n    PROBLEM_DETAILS: 'problem_details',\n    METADATA: 'bytebytebunny_metadata',\n    CORE_DATA: 'bytebytebunny_data',\n    USER_SETTINGS: 'bytebytebunny_settings',\n};\nexport const DEFAULT_UI_LANGUAGE = 'en';\n// 计时器相关常量\nexport const TIMER_CONSTANTS = {\n    DEFAULT_ALERT_MINUTES: 10, // 默认提醒时间（分钟）\n    MIN_ALERT_MINUTES: 0, // 最小提醒时间（分钟）\n    MAX_ALERT_MINUTES: 60, // 最大提醒时间（分钟）\n    STEP_MINUTES: 0.5, // 时间调整步长（分钟）\n    FLASH_INTERVAL: 500, // 闪烁间隔（毫秒）\n    FLASH_COUNT: 10, // 闪烁次数（5次来回，共10次变化）\n    SAVE_MESSAGE_DURATION: 2000, // 保存提示显示时间（毫秒）\n    DEFAULT_POSITION: {\n        // 默认位置\n        X_OFFSET: 150, // 距右边距（像素）\n        Y_OFFSET: 10, // 距上边距（像素）\n    },\n};\n// 难度映射\nexport const DIFFICULTY_MAP = {\n    Easy: { zh: '简单', en: 'Easy' },\n    Medium: { zh: '中等', en: 'Medium' },\n    Hard: { zh: '困难', en: 'Hard' },\n};\n/**\n * 艾宾浩斯遗忘曲线复习时间点（小时）\n * 5分钟 - 30分钟 - 12小时 - 1天 - 2天 - 4天 - 7天 - 15天\n */\nexport const REVIEW_INTERVALS = {\n    FIRST: 0.083, // 5分钟\n    SECOND: 0.5, // 30分钟\n    THIRD: 4, // 4小时\n    FOURTH: 24, // 1天\n    FIFTH: 72, // 3天\n    SIXTH: 168, // 7天\n    SEVENTH: 360, // 15天\n    EIGHTH: 720, // 30天\n};\n/**\n * 题目难度相关常量\n */\nexport const PROBLEM_CONSTANTS = {\n    // 难度分布权重\n    DIFFICULTY_DISTRIBUTION: {\n        Easy: 0.15, // 15% 简单题\n        Medium: 0.6, // 60% 中等题\n        Hard: 0.25, // 25% 困难题\n    },\n    // 期望解题时间（毫秒）\n    EXPECTED_SOLVING_TIME: {\n        Easy: {\n            expected: 15 * 60 * 1000, // 15分钟\n            maximum: 30 * 60 * 1000, // 30分钟\n        },\n        Medium: {\n            expected: 30 * 60 * 1000, // 30分钟\n            maximum: 60 * 60 * 1000, // 1小时\n        },\n        Hard: {\n            expected: 60 * 60 * 1000, // 1小时\n            maximum: 120 * 60 * 1000, // 2小时\n        },\n    },\n};\nexport const EVALUATION_CONSTANTS = {\n    RECENT_ACC_THRESHOLD: 0.8,\n    HISTORY_ACC_THRESHOLD: 0.7,\n    HISTORY_FIRST_SOLVE_MINUTES: 25,\n    RECENT_SESSION_DAYS: 15,\n    HISTORY_SESSION_COUNT: 3,\n};\n/**\n * 复习优先级计算权重\n */\nexport const REVIEW_WEIGHTS = {\n    Easy: {\n        timeDeviation: 0.5, // 时间偏差权重\n        failureRate: 0.3, // 失败率权重\n        solvingTime: 0.2, // 解题时间权重\n    },\n    Medium: {\n        timeDeviation: 0.4,\n        failureRate: 0.4,\n        solvingTime: 0.2,\n    },\n    Hard: {\n        timeDeviation: 0.3,\n        failureRate: 0.5,\n        solvingTime: 0.2,\n    },\n};\nexport const OBSERVER_CONSTANTS = {\n    TIMEOUT: 10000\n};\nexport const DATA_VERSION = {\n    CURRENT: 1\n};\nexport const STORAGE_CONSTANTS = {\n    DATA_VERSION: 1,\n    // ... 其他常量\n};\n/**\n * 会话相关常量\n */\nexport const SESSION_CONSTANTS = {\n    // 会话超时时间（毫秒）\n    // 超过此时间未活动的会话视为已超时，不可重用\n    TIMEOUT: 30 * 60 * 1000, // 30分钟\n    // 最小有效活动时间：10秒\n    // 用户需要在页面停留超过这个时间才计算为有效活动\n    MIN_ACTIVITY_DURATION: 10 * 1000,\n    // 活动检测间隔：1秒\n    // 用于定期检查用户是否仍在页面活动\n    ACTIVITY_CHECK_INTERVAL: 1000,\n    // 提交结果等待超时：30秒\n    SUBMISSION_RESULT_TIMEOUT: 30 * 1000,\n    // 提交结果检查间隔：1秒\n    SUBMISSION_CHECK_INTERVAL: 1000,\n};\n/**\n * 复习优先级计算相关常量\n */\nexport const PRIORITY_CONSTANTS = {\n    // 各维度权重\n    WEIGHTS: {\n        TIME_SCORE: 0.4, // 时间维度权重\n        VALUE_SCORE: 0.3, // 题目价值维度权重\n        PERFORMANCE_SCORE: 0.3 // 历史表现维度权重\n    },\n    // 时间分数计算参数\n    TIME_SCORE: {\n        // 错过复习点的最大分数\n        MISSED_MAX_SCORE: 0.8,\n        // 接近复习点的最大分数\n        APPROACHING_MAX_SCORE: 0.6,\n        // 不同阶段的容忍时间（小时）\n        TOLERANCE_HOURS: {\n            FIRST_DAY: 2, // 24小时内\n            THREE_DAYS: 6, // 1-3天\n            LATER: 12 // 3天以上\n        },\n        // 不同阶段的提前量（小时）\n        ADVANCE_HOURS: {\n            FIRST_DAY: 1, // 24小时内\n            THREE_DAYS: 3, // 1-3天\n            LATER: 6 // 3天以上\n        }\n    },\n    // 历史表现计算参数\n    PERFORMANCE: {\n        // 最近表现的时间窗口（天）\n        RECENT_WINDOW_DAYS: 30,\n        // 计算趋势时的最小练习次数\n        MIN_SESSIONS_FOR_TREND: 3,\n        // 练习次数归一化的基准值\n        PRACTICE_COUNT_BASE: 5\n    }\n};\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nexport class SubmissionHandlerEN {\n    static getSubmissionIdFromUrl() {\n        const match = window.location.pathname.match(/\\/submissions\\/(\\d+)/);\n        return match ? match[1] : null;\n    }\n    static waitForSubmissionResult() {\n        return __awaiter(this, arguments, void 0, function* (timeout = 30000) {\n            console.log('BytebyteBunny: Waiting for submission result (EN)...');\n            const startTime = Date.now();\n            const currentSubmissionId = this.getSubmissionIdFromUrl();\n            // 如果当前URL中没有submission ID，等待URL变化\n            if (!currentSubmissionId || currentSubmissionId === this.lastSubmissionId) {\n                console.log('BytebyteBunny: Waiting for new submission URL...');\n                return new Promise((resolve) => {\n                    const checkUrl = () => {\n                        const newSubmissionId = this.getSubmissionIdFromUrl();\n                        if (newSubmissionId && newSubmissionId !== this.lastSubmissionId) {\n                            this.lastSubmissionId = newSubmissionId;\n                            console.log('BytebyteBunny: New submission detected:', newSubmissionId);\n                            this.checkSubmissionResult(resolve, timeout - (Date.now() - startTime));\n                        }\n                        else if (Date.now() - startTime < timeout) {\n                            setTimeout(checkUrl, 100);\n                        }\n                        else {\n                            console.log('BytebyteBunny: Timeout waiting for new submission');\n                            resolve({\n                                status: 'Timeout - Result Unknown',\n                                details: '',\n                            });\n                        }\n                    };\n                    checkUrl();\n                });\n            }\n            // 如果已经在新的submission页面，直接检查结果\n            this.lastSubmissionId = currentSubmissionId;\n            return new Promise((resolve) => {\n                this.checkSubmissionResult(resolve, timeout);\n            });\n        });\n    }\n    static checkSubmissionResult(resolve, remainingTimeout) {\n        const startTime = Date.now();\n        const checkResult = () => {\n            var _a, _b;\n            // 遍历所有可能的选择器\n            for (const selector of this.RESULT_SELECTORS) {\n                const resultElements = document.querySelectorAll(selector);\n                for (const element of resultElements) {\n                    const text = ((_a = element.textContent) === null || _a === void 0 ? void 0 : _a.trim()) || '';\n                    const statusMatch = text.match(/(Accepted|Runtime Error|Time Limit Exceeded|Compile Error|Wrong Answer)/i);\n                    if (statusMatch) {\n                        const status = statusMatch[0];\n                        let details = '';\n                        // 获取详细信息\n                        if (status === 'Wrong Answer') {\n                            const parentDiv = element.closest('div[class*=\"space-y-4\"]');\n                            if (parentDiv) {\n                                const detailsDivs = parentDiv.querySelectorAll('div[class*=\"space-y-4\"] > div:not(:first-child)');\n                                details = Array.from(detailsDivs)\n                                    .map((div) => { var _a; return (_a = div.textContent) === null || _a === void 0 ? void 0 : _a.trim(); })\n                                    .filter(Boolean)\n                                    .join(' | ');\n                            }\n                        }\n                        else {\n                            const detailsElement = element.nextElementSibling;\n                            if (detailsElement) {\n                                details = ((_b = detailsElement.textContent) === null || _b === void 0 ? void 0 : _b.trim()) || '';\n                            }\n                        }\n                        console.log('BytebyteBunny: Submission result found:', { status, details });\n                        resolve({ status, details });\n                        return;\n                    }\n                }\n            }\n            if (Date.now() - startTime < remainingTimeout) {\n                setTimeout(checkResult, 100); // 每100ms检查一次\n            }\n            else {\n                console.log('BytebyteBunny: Check timeout reached');\n                resolve({\n                    status: 'Timeout - Result Unknown',\n                    details: '',\n                });\n            }\n        };\n        checkResult();\n    }\n    static parseSubmissionDetails(details) {\n        const runtimeMatch = details.match(/(\\d+)\\s*ms/);\n        const memoryMatch = details.match(/(\\d+\\.?\\d*)\\s*MB/);\n        return {\n            runtime: runtimeMatch ? parseInt(runtimeMatch[1]) : undefined,\n            memory: memoryMatch ? parseFloat(memoryMatch[1]) * 1024 : undefined, // 转换为 KB\n        };\n    }\n}\nSubmissionHandlerEN.RESULT_SELECTORS = [\n    'div[class*=\"flex items-center\"] > div > span',\n    'div[class*=\"flex items-center justify-between\"] > div > h3',\n    'div[class*=\"space-y-4\"] > div[class*=\"flex items-center\"] > div > span',\n    '[data-e2e-locator=\"submission-result\"]',\n    'div[class*=\"space-y-4\"] > div[class*=\"flex items-center\"] > div',\n    'div[class*=\"space-y-4\"] > div[class*=\"flex items-center justify-between gap-4\"] > div > h3 > div[class*=\"sd-sm:block hidden\"] > div',\n];\nSubmissionHandlerEN.lastSubmissionId = null;\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nexport class SubmissionHandlerZH {\n    static getSubmissionIdFromUrl() {\n        const match = window.location.pathname.match(/\\/submissions\\/(\\d+)/);\n        return match ? match[1] : null;\n    }\n    static waitForSubmissionResult() {\n        return __awaiter(this, arguments, void 0, function* (timeout = 30000) {\n            console.log('BytebyteBunny: Waiting for submission result (ZH)...');\n            const startTime = Date.now();\n            const currentSubmissionId = this.getSubmissionIdFromUrl();\n            // 如果当前URL中没有submission ID，等待URL变化\n            if (!currentSubmissionId || currentSubmissionId === this.lastSubmissionId) {\n                console.log('BytebyteBunny: Waiting for new submission URL...');\n                return new Promise((resolve) => {\n                    const checkUrl = () => {\n                        const newSubmissionId = this.getSubmissionIdFromUrl();\n                        if (newSubmissionId && newSubmissionId !== this.lastSubmissionId) {\n                            this.lastSubmissionId = newSubmissionId;\n                            console.log('BytebyteBunny: New submission detected:', newSubmissionId);\n                            this.checkSubmissionResult(resolve, timeout - (Date.now() - startTime));\n                        }\n                        else if (Date.now() - startTime < timeout) {\n                            setTimeout(checkUrl, 100);\n                        }\n                        else {\n                            console.log('BytebyteBunny: Timeout waiting for new submission');\n                            resolve({\n                                status: 'Timeout - Result Unknown',\n                                details: '',\n                            });\n                        }\n                    };\n                    checkUrl();\n                });\n            }\n            // 如果已经在新的submission页面，直接检查结果\n            this.lastSubmissionId = currentSubmissionId;\n            return new Promise((resolve) => {\n                this.checkSubmissionResult(resolve, timeout);\n            });\n        });\n    }\n    static checkSubmissionResult(resolve, remainingTimeout) {\n        const startTime = Date.now();\n        const checkResult = () => {\n            var _a, _b;\n            // 遍历所有可能的选择器\n            for (const selector of this.RESULT_SELECTORS) {\n                const resultElements = document.querySelectorAll(selector);\n                for (const element of resultElements) {\n                    const text = ((_a = element.textContent) === null || _a === void 0 ? void 0 : _a.trim()) || '';\n                    const statusMatch = text.match(/(通过|解答错误|执行出错|超出时间限制|编译出错)/);\n                    if (statusMatch) {\n                        // 将中文状态转换为英文\n                        const statusMap = {\n                            通过: 'Accepted',\n                            解答错误: 'Wrong Answer',\n                            执行出错: 'Runtime Error',\n                            超出时间限制: 'Time Limit Exceeded',\n                            编译出错: 'Compile Error',\n                        };\n                        const status = statusMap[statusMatch[0]];\n                        let details = '';\n                        // 获取详细信息\n                        if (status === 'Accepted') {\n                            // 提取运行时间和内存消耗\n                            const runtimeMatch = text.match(/运行时间\\s*(\\d+)\\s*ms/);\n                            const memoryMatch = text.match(/内存消耗\\s*(\\d+\\.?\\d*)\\s*MB/);\n                            if (runtimeMatch || memoryMatch) {\n                                details = `Runtime: ${(runtimeMatch === null || runtimeMatch === void 0 ? void 0 : runtimeMatch[1]) || '0'}ms, Memory: ${(memoryMatch === null || memoryMatch === void 0 ? void 0 : memoryMatch[1]) || '0'}MB`;\n                            }\n                        }\n                        else if (status === 'Wrong Answer') {\n                            const parentDiv = element.closest('div[class*=\"space-y-4\"]');\n                            if (parentDiv) {\n                                const detailsDivs = parentDiv.querySelectorAll('div[class*=\"space-y-4\"] > div:not(:first-child)');\n                                details = Array.from(detailsDivs)\n                                    .map((div) => { var _a; return (_a = div.textContent) === null || _a === void 0 ? void 0 : _a.trim(); })\n                                    .filter(Boolean)\n                                    .join(' | ');\n                            }\n                        }\n                        else {\n                            const detailsElement = element.nextElementSibling;\n                            if (detailsElement) {\n                                details = ((_b = detailsElement.textContent) === null || _b === void 0 ? void 0 : _b.trim()) || '';\n                            }\n                        }\n                        console.log('BytebyteBunny: Submission result found:', { status, details });\n                        resolve({ status, details });\n                        return;\n                    }\n                }\n            }\n            if (Date.now() - startTime < remainingTimeout) {\n                setTimeout(checkResult, 100); // 每100ms检查一次\n            }\n            else {\n                console.log('BytebyteBunny: Check timeout reached');\n                resolve({\n                    status: 'Timeout - Result Unknown',\n                    details: '',\n                });\n            }\n        };\n        checkResult();\n    }\n    static parseSubmissionDetails(details) {\n        // 支持中英文格式\n        const runtimeMatch = details.match(/(?:Runtime|运行时间):\\s*(\\d+)ms/) || details.match(/(\\d+)\\s*ms/);\n        const memoryMatch = details.match(/(?:Memory|内存消耗):\\s*(\\d+\\.?\\d*)MB/) || details.match(/(\\d+\\.?\\d*)\\s*MB/);\n        return {\n            runtime: runtimeMatch ? parseInt(runtimeMatch[1]) : undefined,\n            memory: memoryMatch ? parseFloat(memoryMatch[1]) * 1024 : undefined, // 转换为 KB\n        };\n    }\n}\nSubmissionHandlerZH.RESULT_SELECTORS = [\n    // 中文版特定选择器\n    'div[class*=\"flex w-full items-center justify-between gap-4\"] > div:first-child > span', // \"通过\" 状态\n    'div[class*=\"flex w-full items-center justify-between gap-4\"] > div:first-child', // 其他状态\n    // 通用选择器（作为备用）\n    'div[class*=\"flex items-center\"] > div > span',\n    'div[class*=\"flex items-center justify-between\"] > div > h3',\n];\nSubmissionHandlerZH.lastSubmissionId = null;\n","// src/types/messages.ts\n// 定义所有可能的消息动作\nexport var MessageAction;\n(function (MessageAction) {\n    // 会话管理\n    MessageAction[\"SESSION_START\"] = \"session:start\";\n    MessageAction[\"SESSION_END\"] = \"session:end\";\n    MessageAction[\"SESSION_UPDATE\"] = \"session:update\";\n    MessageAction[\"SESSION_LEAVE\"] = \"session:leave\";\n    MessageAction[\"SESSION_RETURN\"] = \"session:return\";\n    MessageAction[\"SESSION_UPDATE_ACTIVITY\"] = \"session:update_activity\";\n    // 提交记录\n    MessageAction[\"SUBMISSION_ADD\"] = \"session:submission_add\";\n    // 问题相关\n    MessageAction[\"DATA_PROBLEM_UPDATE\"] = \"data:problem_update\";\n    // 数据管理\n    MessageAction[\"DATA_CLEAR_ALL\"] = \"data:clear_all\";\n    MessageAction[\"DATA_EXPORT\"] = \"data:export\";\n    MessageAction[\"DATA_IMPORT\"] = \"data:import\";\n    MessageAction[\"DATA_GET_STATS\"] = \"data:get_stats\";\n    MessageAction[\"DATA_GET_SESSIONS\"] = \"data:get_sessions\";\n    MessageAction[\"DATA_GET_PROBLEMS\"] = \"data:get_problems\";\n    MessageAction[\"DATA_GET_SETTINGS\"] = \"data:get_settings\";\n    MessageAction[\"DATA_UPDATE_SETTINGS\"] = \"data:update_settings\";\n})(MessageAction || (MessageAction = {}));\n// 预定义错误代码\nexport var MessageErrorCode;\n(function (MessageErrorCode) {\n    // 会话相关错误\n    MessageErrorCode[\"SESSION_INITIALIZE_ERROR\"] = \"session:initialize_error\";\n    MessageErrorCode[\"SESSION_LEAVE_ERROR\"] = \"session:leave_error\";\n    MessageErrorCode[\"SESSION_RETURN_ERROR\"] = \"session:return_error\";\n    MessageErrorCode[\"SESSION_UPDATE_ERROR\"] = \"session:update_error\";\n    MessageErrorCode[\"SESSION_CLOSE_ERROR\"] = \"session:close_error\";\n    MessageErrorCode[\"SESSION_NOT_FOUND\"] = \"session:not_found\";\n    // 提交相关错误\n    MessageErrorCode[\"SUBMISSION_ADD_ERROR\"] = \"submission:add_error\";\n    // 数据管理相关错误\n    MessageErrorCode[\"DATA_CLEAR_ERROR\"] = \"data:clear_error\";\n    MessageErrorCode[\"DATA_EXPORT_ERROR\"] = \"data:export_error\";\n    MessageErrorCode[\"DATA_IMPORT_ERROR\"] = \"data:import_error\";\n    // 问题相关错误\n    MessageErrorCode[\"DATA_PROBLEM_UPDATE_ERROR\"] = \"data:problem_update_error\";\n    // 设置相关错误\n    MessageErrorCode[\"DATA_SETTINGS_UPDATE_ERROR\"] = \"data:settings_update_error\";\n    // 存储相关错误\n    MessageErrorCode[\"DATA_STATS_ERROR\"] = \"data:stats_error\";\n    // 通用错误\n    MessageErrorCode[\"UNKNOWN_ERROR\"] = \"error:unknown\";\n})(MessageErrorCode || (MessageErrorCode = {}));\n","/**\n * 日志管理类\n * Logger management class\n */\nexport class Logger {\n    constructor(prefix) {\n        this.logLevel = 'info';\n        this.logCounter = 0;\n        this.lastResetTime = Date.now();\n        this.prefix = prefix;\n    }\n    /**\n     * 设置日志级别\n     * Set log level\n     */\n    setLogLevel(level) {\n        this.logLevel = level;\n    }\n    /**\n     * 输出普通日志\n     * Output normal log\n     */\n    log(message, ...args) {\n        this.logMessage('info', console.log, message, ...args);\n    }\n    /**\n     * 输出错误日志\n     * Output error log\n     */\n    error(message, error) {\n        if (this.shouldLog('error')) {\n            let errorMessage;\n            if (error === null || error === undefined) {\n                errorMessage = '<no error details>';\n            }\n            else if (error instanceof Error) {\n                errorMessage = `${error.message}\\n${error.stack}`;\n            }\n            else {\n                try {\n                    errorMessage = JSON.stringify(error);\n                }\n                catch (e) {\n                    errorMessage = String(error);\n                }\n            }\n            console.error(`${this.prefix} ${getTimestamp()}: ${message}:`, errorMessage);\n        }\n    }\n    /**\n     * 输出调试日志\n     * Output debug log\n     */\n    debug(message, ...args) {\n        this.logMessage('debug', console.debug, message, ...args);\n    }\n    /**\n     * 检查是否应该输出日志\n     * Check if should output log\n     */\n    shouldLog(minLevel) {\n        return Logger.LOG_LEVELS.indexOf(this.logLevel) <= Logger.LOG_LEVELS.indexOf(minLevel);\n    }\n    /**\n     * 输出警告日志\n     * Output warning log\n     */\n    warn(message, ...args) {\n        this.logMessage('info', console.warn, message, ...args);\n    }\n    /**\n     * 输出信息日志\n     * Output info log\n     */\n    info(message, ...args) {\n        this.logMessage('info', console.info, message, ...args);\n    }\n    /**\n     * 统一的日志输出方法\n     */\n    logMessage(level, consoleMethod, message, ...args) {\n        if (this.shouldLog(level) && !this.shouldThrottle()) {\n            consoleMethod(`${this.prefix} ${getTimestamp()}: ${message}`, ...args);\n        }\n    }\n    shouldThrottle() {\n        const now = Date.now();\n        if (now - this.lastResetTime >= Logger.THROTTLE_INTERVAL) {\n            this.logCounter = 0;\n            this.lastResetTime = now;\n            return false;\n        }\n        this.logCounter++;\n        return this.logCounter > Logger.MAX_LOGS_PER_INTERVAL;\n    }\n}\nLogger.LOG_LEVELS = ['debug', 'info', 'error'];\nLogger.THROTTLE_INTERVAL = 1000; // 1秒内最多输出的日志数\nLogger.MAX_LOGS_PER_INTERVAL = 100;\n/**\n * 日志工厂类\n * Logger factory class\n * 管理不同模块的Logger实例\n */\nexport class LoggerFactory {\n    constructor() {\n        this.loggers = new Map();\n        this.defaultPrefix = 'BBBunny';\n        this.SEPARATOR = ':';\n    }\n    /**\n     * 获取LoggerFactory实例\n     * Get LoggerFactory instance\n     */\n    static getInstance() {\n        if (!LoggerFactory.instance) {\n            LoggerFactory.instance = new LoggerFactory();\n        }\n        return LoggerFactory.instance;\n    }\n    /**\n     * 设置默认前缀\n     * Set default prefix\n     */\n    setDefaultPrefix(prefix) {\n        this.defaultPrefix = prefix;\n    }\n    /**\n     * 获取指定模块的Logger\n     * Get Logger for specific module\n     * @param module 模块路径，可以是多级，如 ['ContentScript', 'Timer']\n     */\n    getLogger(module) {\n        const modulePath = Array.isArray(module) ? module : [module];\n        const loggerKey = modulePath.join(this.SEPARATOR);\n        const fullPrefix = `${this.defaultPrefix}${this.SEPARATOR}${loggerKey}`;\n        if (!this.loggers.has(loggerKey)) {\n            this.loggers.set(loggerKey, new Logger(fullPrefix));\n        }\n        return this.loggers.get(loggerKey);\n    }\n    /**\n     * 设置全局日志级别\n     * Set global log level\n     */\n    setGlobalLogLevel(level) {\n        this.loggers.forEach(logger => logger.setLogLevel(level));\n    }\n}\nfunction getTimestamp() {\n    const now = new Date();\n    return `[${now.toLocaleString()}]`;\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { MessageAction, MessageErrorCode } from './message';\nexport class MessageBuilder {\n    // 异步操作包装器\n    static wrap(operation_1) {\n        return __awaiter(this, arguments, void 0, function* (operation, errorCode = MessageErrorCode.UNKNOWN_ERROR) {\n            try {\n                const result = yield operation();\n                return this.response.success(result);\n            }\n            catch (error) {\n                return this.response.error(errorCode, error instanceof Error ? error.message : 'Operation failed');\n            }\n        });\n    }\n}\n// Session 相关消息构建\nMessageBuilder.session = {\n    start(problem, currentTime) {\n        return {\n            action: MessageAction.SESSION_START,\n            payload: { problem, currentTime }\n        };\n    },\n    end(sessionId, endTime, endReason) {\n        return {\n            action: MessageAction.SESSION_END,\n            payload: { sessionId, endTime, endReason }\n        };\n    },\n    update(sessionId, updates) {\n        return {\n            action: MessageAction.SESSION_UPDATE,\n            payload: { sessionId, updates }\n        };\n    },\n    leave(sessionId, leaveTime) {\n        return {\n            action: MessageAction.SESSION_LEAVE,\n            payload: { sessionId, leaveTime }\n        };\n    },\n    return(sessionId, returnTime) {\n        return {\n            action: MessageAction.SESSION_RETURN,\n            payload: { sessionId, returnTime }\n        };\n    },\n    updateActivity(sessionId, activityTime) {\n        return {\n            action: MessageAction.SESSION_UPDATE_ACTIVITY,\n            payload: { sessionId, activityTime }\n        };\n    },\n    addSubmission(sessionId, code, language, status, runtime, errorMessage) {\n        return {\n            action: MessageAction.SUBMISSION_ADD,\n            payload: { sessionId, code, language, status, runtime, errorMessage }\n        };\n    }\n};\n// 数据管理相关消息构建\nMessageBuilder.data = {\n    export(reason, details) {\n        return {\n            action: MessageAction.DATA_EXPORT,\n            payload: {\n                reason,\n                details: Object.assign({ source: details.source, timestamp: Date.now() }, details)\n            }\n        };\n    },\n    import(data, options) {\n        return {\n            action: MessageAction.DATA_IMPORT,\n            payload: { data, options }\n        };\n    },\n    getStats() {\n        return {\n            action: MessageAction.DATA_GET_STATS,\n            payload: undefined\n        };\n    },\n    getSessions() {\n        return {\n            action: MessageAction.DATA_GET_SESSIONS,\n            payload: undefined\n        };\n    },\n    getProblems(problemIds) {\n        return {\n            action: MessageAction.DATA_GET_PROBLEMS,\n            payload: { problemIds }\n        };\n    },\n    updateProblem(problem) {\n        return {\n            action: MessageAction.DATA_PROBLEM_UPDATE,\n            payload: {\n                problem\n            }\n        };\n    }\n};\n// 设置相关消息构建\nMessageBuilder.settings = {\n    get() {\n        return {\n            action: MessageAction.DATA_GET_SETTINGS,\n            payload: undefined\n        };\n    },\n    update(updates) {\n        return {\n            action: MessageAction.DATA_UPDATE_SETTINGS,\n            payload: updates\n        };\n    }\n};\n// 响应构建\nMessageBuilder.response = {\n    success(data) {\n        return {\n            success: true,\n            data\n        };\n    },\n    error(code, message) {\n        return {\n            success: false,\n            error: { code, message }\n        };\n    },\n    unknown(error) {\n        return this.error(MessageErrorCode.UNKNOWN_ERROR, error instanceof Error ? error.message : 'Unknown error occurred');\n    }\n};\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { SessionEndReason } from '../types/session';\nimport { SESSION_CONSTANTS } from '../constants';\nimport { SubmissionHandlerEN } from './submission-handler-en';\nimport { SubmissionHandlerZH } from './submission-handler-zh';\nimport { LoggerFactory } from '../utils/logger';\nimport { MessageBuilder } from '../types/message-builder';\n/**\n * SessionManager 负责管理用户在 LeetCode 题目页面上的学习会话\n * Manages user's learning sessions on LeetCode problem pages\n *\n * 主要功能 Main features:\n * 1. 会话管理 Session Management\n *    - 创建新会话 Create new sessions\n *    - 恢复已有会话 Resume existing sessions\n * 2. 活动追踪 Activity Tracking\n *    - 追踪用户活动时间 Track user activity time\n *    - 记录页面离开/返回 Record page leaves/returns\n * 3. 提交处理 Submission Handling\n *    - 处理代码提交结果 Handle code submission results\n */\nexport class SessionManager {\n    constructor() {\n        this.currentSessionId = null;\n        this.problemInfo = null;\n        this.activityTimer = null;\n        this.activityStartTime = null;\n        this.lastActivityTime = null;\n        this.logger = LoggerFactory.getInstance().getLogger('SessionManager');\n    }\n    /**\n     * 开始追踪用户在当前题目上的活动\n     * Start tracking user activity on current problem\n     */\n    startTracking(problem) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.problemInfo = problem;\n            yield this.initialize();\n            this.setupActivityTracking();\n        });\n    }\n    /**\n     * 设置活动追踪相关的事件监听\n     * Setup event listeners for activity tracking\n     */\n    setupActivityTracking() {\n        // 监听页面可见性变化 Listen for visibility changes\n        document.addEventListener('visibilitychange', () => {\n            if (document.hidden) {\n                this.handlePageLeave();\n            }\n            else {\n                this.handlePageReturn();\n            }\n        });\n        // 监听页面关闭 Listen for page unload\n        window.addEventListener('beforeunload', () => {\n            this.closeSession(SessionEndReason.MANUAL);\n        });\n        // 添加超时检查\n        setInterval(() => {\n            if (this.currentSessionId &&\n                this.lastActivityTime !== null &&\n                Date.now() - this.lastActivityTime > SESSION_CONSTANTS.TIMEOUT) {\n                this.closeSession(SessionEndReason.TIMEOUT);\n            }\n        }, SESSION_CONSTANTS.ACTIVITY_CHECK_INTERVAL);\n        this.startActivityTracking();\n    }\n    /**\n     * 启动活动追踪定时器\n     * Start the activity tracking timer\n     */\n    startActivityTracking() {\n        // 清除可能存在的旧时器\n        if (this.activityTimer !== null) {\n            window.clearInterval(this.activityTimer);\n        }\n        this.activityTimer = window.setInterval(() => {\n            if (!document.hidden && this.activityStartTime === null) {\n                // 用户开始活动\n                this.activityStartTime = Date.now();\n            }\n        }, SESSION_CONSTANTS.ACTIVITY_CHECK_INTERVAL);\n    }\n    /**\n     * 处理页面离开事件\n     * Handle page leave events\n     */\n    handlePageLeave() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.logger.log('Page visibility changed: page leave detected');\n            if (this.activityStartTime !== null) {\n                yield this.updateSessionActivity();\n                if (this.currentSessionId) {\n                    try {\n                        this.logger.log('Recording session leave for session:', this.currentSessionId);\n                        const message = MessageBuilder.session.leave(this.currentSessionId, Date.now());\n                        yield chrome.runtime.sendMessage(message);\n                    }\n                    catch (error) {\n                        this.logger.error('Failed to record session leave:', error);\n                    }\n                }\n                this.activityStartTime = null;\n            }\n        });\n    }\n    /**\n     * 处理页面返回事件\n     * Handle page return events\n     */\n    handlePageReturn() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.logger.log('Page visibility changed: page return detected');\n            this.activityStartTime = Date.now();\n            if (this.currentSessionId) {\n                try {\n                    this.logger.log('Recording session return for session:', this.currentSessionId);\n                    const message = MessageBuilder.session.return(this.currentSessionId, Date.now());\n                    yield chrome.runtime.sendMessage(message);\n                }\n                catch (error) {\n                    this.logger.error('Failed to record session return:', error);\n                }\n            }\n        });\n    }\n    /**\n     * 更新会话活动时间\n     * Update session activity time\n     */\n    updateSessionActivity() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.currentSessionId)\n                return;\n            try {\n                const currentTime = Date.now();\n                const message = MessageBuilder.session.updateActivity(this.currentSessionId, currentTime);\n                this.logger.log('Updating session activity:', message);\n                yield chrome.runtime.sendMessage(message);\n                this.lastActivityTime = currentTime;\n            }\n            catch (error) {\n                this.logger.error('Failed to update session activity:', error);\n            }\n        });\n    }\n    /**\n     * 初始化会话\n     * Initialize session\n     */\n    initialize() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                if (!this.problemInfo) {\n                    this.logger.error('No problem info available for session initialization', null);\n                    return;\n                }\n                const message = MessageBuilder.session.start(this.problemInfo, Date.now());\n                this.logger.log('Sending session initialize message', message);\n                const response = yield chrome.runtime.sendMessage(message);\n                if (response.success) {\n                    this.currentSessionId = response.data.sessionId;\n                    this.activityStartTime = Date.now();\n                    this.lastActivityTime = Date.now();\n                    this.logger.log(response.data.isNewSession ? 'Started new session:' : 'Resumed existing session:', this.currentSessionId);\n                }\n                else {\n                    this.logger.error('Failed to initialize session:', response.error);\n                }\n            }\n            catch (error) {\n                this.logger.error('Failed to initialize session:', error);\n            }\n        });\n    }\n    /**\n     * 根据当前域名获取对应的提交处理器\n     * Get submission handler based on current domain\n     */\n    getSubmissionHandler() {\n        const isChineseVersion = window.location.hostname === 'leetcode.cn';\n        return isChineseVersion ? SubmissionHandlerZH : SubmissionHandlerEN;\n    }\n    /**\n     * 处理代码提交\n     * - 等待提交结果\n     * - 记录提交信息\n     * Handle code submission\n     * - Wait for submission result\n     * - Record submission information\n     */\n    handleSubmission() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.currentSessionId) {\n                this.logger.warn('No active session for submission');\n                return;\n            }\n            try {\n                yield this.updateSessionActivity();\n                this.logger.log('Handling submission...');\n                const handler = this.getSubmissionHandler();\n                const result = yield handler.waitForSubmissionResult();\n                this.logger.log('Submission result:', result);\n                const message = MessageBuilder.session.addSubmission(this.currentSessionId, '123', // TODO: 获取实际代码\n                'unknown', // TODO: 获取实际语言\n                result.status === 'Accepted' ? 'success' : 'failed', result.status === 'Accepted' && result.details\n                    ? handler.parseSubmissionDetails(result.details).runtime\n                    : undefined, result.status !== 'Accepted' ? result.details : undefined);\n                this.logger.log('Sending submission message:', message);\n                const response = yield chrome.runtime.sendMessage(message);\n                this.logger.log('Submission create response:', response);\n            }\n            catch (error) {\n                this.logger.error('Failed to handle submission:', error);\n            }\n        });\n    }\n    /**\n     * 关闭会话\n     * - 用户主动关闭标签页\n     * - 会话超时\n     */\n    closeSession() {\n        return __awaiter(this, arguments, void 0, function* (reason = SessionEndReason.MANUAL) {\n            if (!this.currentSessionId)\n                return;\n            try {\n                const message = MessageBuilder.session.end(this.currentSessionId, Date.now(), reason);\n                yield chrome.runtime.sendMessage(message);\n                this.currentSessionId = null;\n                this.activityStartTime = null;\n                if (this.activityTimer !== null) {\n                    window.clearInterval(this.activityTimer);\n                    this.activityTimer = null;\n                }\n            }\n            catch (error) {\n                this.logger.error('Failed to close session:', error);\n            }\n        });\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { LoggerFactory } from '../utils/logger';\nexport class ProblemExtractor {\n    static normalizeDifficulty(difficulty) {\n        // 将中文难度转换为英文\n        if (difficulty === '简单')\n            return 'Easy';\n        if (difficulty === '中等')\n            return 'Medium';\n        if (difficulty === '困难')\n            return 'Hard';\n        return difficulty;\n    }\n    static getProblemInfo() {\n        return __awaiter(this, void 0, void 0, function* () {\n            var _a, _b;\n            this.logger.log('Attempting to extract problem info...');\n            const titleElement = document.querySelector(this.TITLE_SELECTOR);\n            const difficultyElement = document.querySelector(this.DIFFICULTY_SELECTOR);\n            const problemId = window.location.pathname.split('/')[2];\n            if (titleElement && difficultyElement && problemId) {\n                const title = ((_a = titleElement.textContent) === null || _a === void 0 ? void 0 : _a.trim()) || '';\n                const rawDifficulty = ((_b = difficultyElement.textContent) === null || _b === void 0 ? void 0 : _b.trim()) || '';\n                const difficulty = this.normalizeDifficulty(rawDifficulty);\n                const info = {\n                    id: problemId,\n                    title,\n                    difficulty,\n                };\n                this.logger.log('Successfully extracted problem info:', info);\n                return info;\n            }\n            this.logger.log('Failed to extract problem info');\n            return null;\n        });\n    }\n    static retryGetProblemInfo() {\n        return __awaiter(this, arguments, void 0, function* (maxRetries = 5, interval = 1000) {\n            return new Promise((resolve, reject) => {\n                let retries = 0;\n                const attempt = () => __awaiter(this, void 0, void 0, function* () {\n                    this.logger.log(`Attempt ${retries + 1}/${maxRetries} to get problem info`);\n                    const info = yield this.getProblemInfo();\n                    if (info) {\n                        resolve(info);\n                    }\n                    else {\n                        retries++;\n                        if (retries < maxRetries) {\n                            this.logger.log(`Retrying in ${interval}ms...`);\n                            setTimeout(attempt, interval);\n                        }\n                        else {\n                            this.logger.error('Max retries reached', new Error('Failed to retrieve problem info'));\n                            reject(new Error('Failed to retrieve problem info'));\n                        }\n                    }\n                });\n                attempt();\n            });\n        });\n    }\n}\nProblemExtractor.TITLE_SELECTOR = 'div[class*=\"flex items-start justify-between\"] div[class*=\"flex items-start\"] a';\nProblemExtractor.DIFFICULTY_SELECTOR = 'div[class*=\"bg-fill-secondary\"][class*=\"text-difficulty\"]';\n// 使用统一的 logger\nProblemExtractor.logger = LoggerFactory.getInstance().getLogger(['ContentScript', 'ProblemExtractor']);\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { STORAGE_KEYS, TIMER_CONSTANTS } from '../constants';\nimport { LoggerFactory } from '../utils/logger';\nexport class Timer {\n    // 添加一个静态方法来检查实例是否存在\n    static hasInstance() {\n        return Timer.instance !== null;\n    }\n    // 使用静态方法创建实例\n    static getInstance() {\n        if (!Timer.instance) {\n            Timer.instance = new Timer();\n        }\n        return Timer.instance;\n    }\n    constructor() {\n        this.element = null;\n        this.intervalId = null;\n        this.isDragging = false;\n        this.currentX = 0;\n        this.currentY = 0;\n        this.initialX = 0;\n        this.initialY = 0;\n        this.STORAGE_KEY = STORAGE_KEYS.TIMER_POSITION;\n        this.ALERT_TIME_KEY = STORAGE_KEYS.ALERT_TIME;\n        this.alertTimeInSeconds = null;\n        this.hasAlerted = false;\n        this.logger = LoggerFactory.getInstance().getLogger(['ContentScript', 'Timer']);\n        this.handleDragStart = (e) => {\n            if (!this.element)\n                return;\n            this.isDragging = true;\n            // 直接使用当前的 left 和 top 值\n            this.currentX = parseInt(this.element.style.left) || 0;\n            this.currentY = parseInt(this.element.style.top) || 0;\n            if (e instanceof MouseEvent) {\n                this.initialX = e.clientX - this.currentX;\n                this.initialY = e.clientY - this.currentY;\n            }\n            else {\n                this.initialX = e.touches[0].clientX - this.currentX;\n                this.initialY = e.touches[0].clientY - this.currentY;\n            }\n            if (e.target === this.element) {\n                this.element.style.cursor = 'grabbing';\n            }\n        };\n        this.handleDrag = (e) => {\n            var _a, _b;\n            if (!this.isDragging)\n                return;\n            e.preventDefault();\n            if (e instanceof MouseEvent) {\n                this.currentX = e.clientX - this.initialX;\n                this.currentY = e.clientY - this.initialY;\n            }\n            else {\n                this.currentX = e.touches[0].clientX - this.initialX;\n                this.currentY = e.touches[0].clientY - this.initialY;\n            }\n            // 确保计时器不会被拖出视窗\n            const maxX = window.innerWidth - (((_a = this.element) === null || _a === void 0 ? void 0 : _a.offsetWidth) || 0);\n            const maxY = window.innerHeight - (((_b = this.element) === null || _b === void 0 ? void 0 : _b.offsetHeight) || 0);\n            this.currentX = Math.min(Math.max(0, this.currentX), maxX);\n            this.currentY = Math.min(Math.max(0, this.currentY), maxY);\n            this.updatePosition();\n        };\n        this.handleDragEnd = () => {\n            this.isDragging = false;\n            if (this.element) {\n                this.element.style.cursor = 'move';\n                this.savePosition(); // 保存最终位置\n            }\n        };\n        // 私有构造函数\n        this.logger.log('Timer instance created');\n        this.startTime = Date.now();\n        this.loadPosition();\n        this.loadAlertTime();\n        this.createTimerElement();\n        this.initDragEvents();\n        this.initWindowResizeHandler();\n        // 监听 storage 变化\n        chrome.storage.onChanged.addListener((changes, namespace) => {\n            if (namespace === 'sync' && changes[this.ALERT_TIME_KEY]) {\n                const newMinutes = changes[this.ALERT_TIME_KEY].newValue;\n                // 将分钟转换为秒\n                this.alertTimeInSeconds = newMinutes * 60;\n                this.hasAlerted = false; // 重置提醒状态\n            }\n        });\n    }\n    loadPosition() {\n        const savedPosition = localStorage.getItem(this.STORAGE_KEY);\n        if (savedPosition) {\n            const { x, y } = JSON.parse(savedPosition);\n            // 确保加载的位置在当前窗口范围内\n            this.currentX = Math.min(x, window.innerWidth - 150);\n            this.currentY = Math.min(y, window.innerHeight - 50);\n        }\n        else {\n            this.setDefaultPosition();\n        }\n    }\n    setDefaultPosition() {\n        this.currentX = Math.max(window.innerWidth - TIMER_CONSTANTS.DEFAULT_POSITION.X_OFFSET, 0);\n        this.currentY = TIMER_CONSTANTS.DEFAULT_POSITION.Y_OFFSET;\n    }\n    initWindowResizeHandler() {\n        window.addEventListener('resize', () => {\n            var _a, _b;\n            // 确保计时器在窗口大小变化后仍在可见范围内\n            const maxX = window.innerWidth - (((_a = this.element) === null || _a === void 0 ? void 0 : _a.offsetWidth) || 0);\n            const maxY = window.innerHeight - (((_b = this.element) === null || _b === void 0 ? void 0 : _b.offsetHeight) || 0);\n            if (this.currentX > maxX || this.currentY > maxY) {\n                this.currentX = Math.min(this.currentX, maxX);\n                this.currentY = Math.min(this.currentY, maxY);\n                this.updatePosition();\n                this.savePosition();\n            }\n        });\n    }\n    savePosition() {\n        localStorage.setItem(this.STORAGE_KEY, JSON.stringify({\n            x: this.currentX,\n            y: this.currentY,\n        }));\n    }\n    createTimerElement() {\n        // 计算时间文本\n        const initialTime = '00:00:00';\n        // 创建元素并设置所有属性，包括内容和尺寸\n        this.element = document.createElement('div');\n        this.element.textContent = initialTime;\n        // 先将元素添加到 DOM 但保持隐藏\n        this.element.style.cssText = `\n            position: fixed;\n            left: ${this.currentX}px;\n            top: ${this.currentY}px;\n            background-color: rgba(0, 0, 0, 0.8);\n            color: white;\n            padding: 8px 12px;\n            border-radius: 4px;\n            font-family: monospace;\n            font-size: 14px;\n            z-index: 10000;\n            cursor: move;\n            user-select: none;\n            touch-action: none;\n            visibility: hidden;\n        `;\n        document.body.appendChild(this.element);\n        // 使用 requestAnimationFrame 确保在下一帧渲染\n        requestAnimationFrame(() => {\n            if (this.element) {\n                // 一次性显示完整的计时器\n                this.element.style.visibility = 'visible';\n            }\n        });\n    }\n    initDragEvents() {\n        if (!this.element)\n            return;\n        this.element.addEventListener('mousedown', this.handleDragStart);\n        document.addEventListener('mousemove', this.handleDrag);\n        document.addEventListener('mouseup', this.handleDragEnd);\n        // 触摸设备支持\n        this.element.addEventListener('touchstart', this.handleDragStart);\n        document.addEventListener('touchmove', this.handleDrag);\n        document.addEventListener('touchend', this.handleDragEnd);\n    }\n    updatePosition() {\n        if (!this.element)\n            return;\n        this.element.style.left = `${this.currentX}px`;\n        this.element.style.top = `${this.currentY}px`;\n    }\n    start() {\n        this.logger.log('Timer started');\n        this.startTime = Date.now();\n        this.intervalId = window.setInterval(() => this.update(), 1000);\n    }\n    loadAlertTime() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield chrome.storage.sync.get(this.ALERT_TIME_KEY);\n            if (result[this.ALERT_TIME_KEY]) {\n                this.alertTimeInSeconds = result[this.ALERT_TIME_KEY] * 60;\n                this.hasAlerted = false;\n            }\n            else {\n                this.alertTimeInSeconds = TIMER_CONSTANTS.DEFAULT_ALERT_MINUTES * 60;\n            }\n        });\n    }\n    setAlertTime(seconds) {\n        this.logger.log(`Setting alert time to ${seconds} seconds`);\n        this.alertTimeInSeconds = seconds;\n        this.hasAlerted = false;\n        // 存储时转换回分钟\n        chrome.storage.sync.set({\n            [this.ALERT_TIME_KEY]: Math.floor(seconds / 60),\n        });\n    }\n    removeAlert() {\n        this.alertTimeInSeconds = null;\n        this.hasAlerted = false;\n        localStorage.removeItem(this.ALERT_TIME_KEY);\n    }\n    checkAndAlert(elapsedSeconds) {\n        if (this.alertTimeInSeconds && elapsedSeconds >= this.alertTimeInSeconds && !this.hasAlerted) {\n            this.showAlert();\n            this.hasAlerted = true;\n        }\n    }\n    showAlert() {\n        // 闪烁效果\n        if (this.element) {\n            const originalBg = this.element.style.backgroundColor;\n            const flash = () => {\n                if (this.element) {\n                    this.element.style.backgroundColor =\n                        this.element.style.backgroundColor === 'rgba(255, 0, 0, 0.8)'\n                            ? originalBg\n                            : 'rgba(255, 0, 0, 0.8)';\n                }\n            };\n            // 闪烁5次\n            let count = 0;\n            const flashInterval = setInterval(() => {\n                flash();\n                count++;\n                if (count >= TIMER_CONSTANTS.FLASH_COUNT) {\n                    clearInterval(flashInterval);\n                    if (this.element) {\n                        this.element.style.backgroundColor = originalBg;\n                    }\n                }\n            }, TIMER_CONSTANTS.FLASH_INTERVAL);\n        }\n    }\n    update() {\n        if (!this.element)\n            return;\n        const elapsed = Date.now() - this.startTime;\n        const seconds = Math.floor((elapsed / 1000) % 60);\n        const minutes = Math.floor((elapsed / (1000 * 60)) % 60);\n        const hours = Math.floor(elapsed / (1000 * 60 * 60));\n        this.element.textContent = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n        // 检查是否需要提醒（使用总秒数）\n        const totalElapsedSeconds = seconds + minutes * 60 + hours * 3600;\n        this.checkAndAlert(totalElapsedSeconds);\n    }\n    destroy() {\n        if (this.intervalId) {\n            clearInterval(this.intervalId);\n            this.intervalId = null;\n        }\n        if (this.element) {\n            // 移除事件监听器\n            this.element.removeEventListener('mousedown', this.handleDragStart);\n            this.element.removeEventListener('touchstart', this.handleDragStart);\n            document.removeEventListener('mousemove', this.handleDrag);\n            document.removeEventListener('touchmove', this.handleDrag);\n            document.removeEventListener('mouseup', this.handleDragEnd);\n            document.removeEventListener('touchend', this.handleDragEnd);\n            window.removeEventListener('resize', this.initWindowResizeHandler);\n            // 移除元素\n            if (this.element.parentNode) {\n                this.element.parentNode.removeChild(this.element);\n            }\n        }\n        this.element = null;\n        Timer.instance = null; // 清除实例\n    }\n}\nTimer.instance = null;\n","const isDevelopment = process.env.NODE_ENV === 'development';\nexport const CONFIG = {\n    logger: {\n        level: isDevelopment ? 'debug' : 'info',\n        defaultPrefix: 'BBBunny'\n    }\n};\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n// src/content/index.ts\nimport { SessionManager } from './session-manager';\nimport { ProblemExtractor } from './problem-extractor';\nimport { Timer } from './timer';\nimport { STORAGE_KEYS, OBSERVER_CONSTANTS } from '../constants';\nimport { LoggerFactory } from '../utils/logger';\nimport { CONFIG } from '../config';\nimport { MessageBuilder } from '../types/message-builder';\n/**\n * LeetCode Content Script 主类\n * Main class for LeetCode content script\n * 负责管理整个内容脚本的生命周期，包括初始化、计时、追踪等功能\n */\nclass LeetCodeContentScript {\n    /**\n     * 私有构造函数，只做基本的初始化\n     * Private constructor, only does basic initialization\n     */\n    constructor() {\n        this.sessionManager = null; // 解题会话实例ietu \n        this.initialized = false; // 初始化标志 Initialization flag\n        this.OBSERVER_TIMEOUT = OBSERVER_CONSTANTS.TIMEOUT; // Observer超时时间(ms) Observer timeout in milliseconds\n        this.observer = null; // DOM观察器 DOM observer\n        this.logger = LoggerFactory.getInstance().getLogger('ContentScript');\n    }\n    /**\n     * 获取单例实例\n     * Get singleton instance\n     */\n    static getInstance() {\n        if (!LeetCodeContentScript.instance) {\n            LeetCodeContentScript.instance = new LeetCodeContentScript();\n        }\n        return LeetCodeContentScript.instance;\n    }\n    /**\n     * 启动 Content Script\n     * Start the content script\n     * 初始化观察器和超时保护机制\n     */\n    start() {\n        this.logger.log('Starting content script...');\n        this.initializeObserver();\n    }\n    /**\n     * 检查并执行初始化\n     * Check and perform initialization\n     * 统一处理所有初始化场景的逻辑\n     */\n    checkAndInitialize() {\n        if (this.initialized) {\n            this.logger.log('Already initialized, skipping...');\n        }\n        else {\n            this.logger.log('Starting initialization...');\n            this.initializeCore();\n        }\n    }\n    /**\n     * 核心初始化函数\n     * Core initialization function\n     * 按顺序执行：页面加载检查 -> 提取题目信息 -> 设置追踪器 -> 设置计时器 -> 设置提交按钮监听\n     */\n    initializeCore() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                yield this.waitForPageLoad();\n                // 提取题目信息\n                const problemBrief = yield this.extractProblemBrief();\n                this.logger.log('Problem brief:', problemBrief);\n                const problemDetail = yield this.extractProblemDetail(problemBrief);\n                this.logger.log('Problem detail:', problemDetail);\n                // 发送到 background\n                yield this.sendProblemToBackground(problemDetail);\n                // 设置会话管理器\n                yield this.setupSessionManager(problemBrief);\n                yield this.setupTimer();\n                this.setupSubmitButtonListener();\n                this.initialized = true;\n                this.logger.log('Initialization complete');\n            }\n            catch (error) {\n                this.logger.error('Failed to initialize content script', error);\n            }\n        });\n    }\n    /**\n     * 等待页面完全加载\n     * Wait for page to fully load\n     */\n    waitForPageLoad() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (document.readyState !== 'complete') {\n                this.logger.log('Waiting for page to load...');\n                yield new Promise((resolve) => window.addEventListener('load', resolve));\n            }\n        });\n    }\n    /**\n     * 将题目信息发送到 background\n     * Send problem information to background\n     */\n    sendProblemToBackground(problemDetail) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.logger.debug('Sending problem to background...', problemDetail);\n            try {\n                yield chrome.runtime.sendMessage(MessageBuilder.data.updateProblem(problemDetail));\n                this.logger.debug('Problem sent successfully');\n            }\n            catch (error) {\n                this.logger.error('Failed to send problem to background:', error);\n                throw error; // 重新抛出错误，让上层处理\n            }\n        });\n    }\n    /**\n     * 提取题目的基本信息\n     * Extract basic problem information\n     */\n    extractProblemBrief() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.logger.debug('Extracting basic problem info...');\n            return yield ProblemExtractor.retryGetProblemInfo();\n        });\n    }\n    /**\n     * 设置问题追踪器\n     * Setup problem tracker\n     * @param problem Problem对象，包含题目的基本信息\n     */\n    setupSessionManager(problem) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.logger.log('Setting up session manager...');\n            this.sessionManager = new SessionManager();\n            yield this.sessionManager.startTracking(problem);\n            this.logger.log('SessionManager setup complete');\n        });\n    }\n    /**\n     * 设置计时器\n     * Setup timer\n     */\n    setupTimer() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.logger.log('Setting up timer...');\n            if (Timer.hasInstance()) {\n                this.logger.log('Timer already exists, skipping timer setup');\n                return;\n            }\n            try {\n                const timer = Timer.getInstance();\n                timer.start();\n                const result = yield chrome.storage.sync.get(STORAGE_KEYS.ALERT_TIME);\n                const alertMinutes = result[STORAGE_KEYS.ALERT_TIME] || 10;\n                timer.setAlertTime(alertMinutes * 60);\n                this.logger.log('Timer setup complete');\n            }\n            catch (error) {\n                this.logger.error('Failed to initialize timer', error);\n            }\n        });\n    }\n    /**\n     * 设置提交按钮的点击监听\n     * Setup submit button click listener\n     * 支持中英文界面的提交按钮\n     */\n    setupSubmitButtonListener() {\n        this.logger.log('Setting up submit button listener...');\n        document.addEventListener('click', (e) => __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            const target = e.target;\n            if (this.isSubmitButton(target)) {\n                this.logger.log('Submit button clicked');\n                yield ((_a = this.sessionManager) === null || _a === void 0 ? void 0 : _a.handleSubmission());\n            }\n        }));\n    }\n    /**\n     * 检查元素是否为提交按钮\n     * Check if element is submit button\n     */\n    isSubmitButton(element) {\n        const submitTexts = ['Submit', '提交'];\n        return submitTexts.includes(element.textContent || '');\n    }\n    /**\n     * 初始化DOM观察器\n     * Initialize DOM observer\n     * 用于检测LeetCode题目内容是否加载完成\n     */\n    initializeObserver() {\n        this.observer = new MutationObserver((mutations, obs) => {\n            const problemContent = document.querySelector('div[class*=\"flex items-start justify-between\"]');\n            if (problemContent) {\n                this.logger.log('Problem content detected');\n                obs.disconnect();\n                this.checkAndInitialize();\n            }\n        });\n        this.observer.observe(document.body, {\n            childList: true,\n            subtree: true,\n        });\n    }\n    /**\n     * 提取题目的详细信息\n     * Extract detailed problem information\n     */\n    extractProblemDetail(problem) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // TODO: 获取详细信息\n            this.logger.debug('Extracting detailed problem info...');\n            const currentLanguage = document.documentElement.lang || 'en';\n            // 判断标题是否包含中文字符\n            const isTitleChinese = this.containsChineseCharacters(problem.title);\n            const problemDetail = {\n                id: problem.id,\n                // 根据标题内容判断语言\n                titleEN: isTitleChinese ? '' : problem.title,\n                titleZH: isTitleChinese ? problem.title : '',\n                difficulty: problem.difficulty,\n                lastUpdated: Date.now(),\n            };\n            return problemDetail;\n        });\n    }\n    /**\n     * 检查文本是否包含中文字符\n     * Check if text contains Chinese characters\n     */\n    containsChineseCharacters(text) {\n        // Unicode 范围：\n        // \\u4e00-\\u9fff: 基本汉字\n        // \\u3400-\\u4dbf: 扩展 A\n        // \\u20000-\\u2a6df: 扩展 B\n        // \\u2a700-\\u2b73f: 扩展 C\n        // \\u2b740-\\u2b81f: 扩展 D\n        // \\u2b820-\\u2ceaf: 扩展 E\n        // \\u2ceb0-\\u2ebef: 扩展 F\n        const chineseRegex = /[\\u4e00-\\u9fff\\u3400-\\u4dbf]/;\n        return chineseRegex.test(text);\n    }\n}\n/**\n * Content Script 入口点\n * Entry point for the content script\n * 当匹配的页面加载时，Chrome 自动注入并执行这个脚本\n * Chrome automatically injects and executes this script when matching pages are loaded\n */\n// 设置全局日志级别\nLoggerFactory.getInstance().setGlobalLogLevel(CONFIG.logger.level);\nLoggerFactory.getInstance().setDefaultPrefix(CONFIG.logger.defaultPrefix);\n// 确认脚本已被加载\nconsole.log('LeetCode Tracker: Content script loaded');\nconst contentScript = LeetCodeContentScript.getInstance();\ncontentScript.start();\n"],"names":["SessionEndReason","STORAGE_KEYS","TIMER_CONSTANTS","X_OFFSET","Y_OFFSET","OBSERVER_CONSTANTS","SESSION_CONSTANTS","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","SubmissionHandlerEN","getSubmissionIdFromUrl","match","window","location","pathname","waitForSubmissionResult","this","arguments","timeout","startTime","Date","now","currentSubmissionId","lastSubmissionId","checkSubmissionResult","checkUrl","newSubmissionId","setTimeout","status","details","remainingTimeout","checkResult","_a","_b","selector","RESULT_SELECTORS","resultElements","document","querySelectorAll","element","statusMatch","textContent","trim","parentDiv","closest","detailsDivs","Array","from","map","div","filter","Boolean","join","detailsElement","nextElementSibling","parseSubmissionDetails","runtimeMatch","memoryMatch","runtime","parseInt","undefined","memory","parseFloat","MessageAction","MessageErrorCode","SubmissionHandlerZH","text","Logger","constructor","prefix","logLevel","logCounter","lastResetTime","setLogLevel","level","log","message","args","logMessage","console","error","shouldLog","errorMessage","Error","stack","JSON","stringify","String","debug","minLevel","LOG_LEVELS","indexOf","warn","info","consoleMethod","shouldThrottle","toLocaleString","THROTTLE_INTERVAL","MAX_LOGS_PER_INTERVAL","LoggerFactory","loggers","Map","defaultPrefix","SEPARATOR","getInstance","instance","setDefaultPrefix","getLogger","module","loggerKey","isArray","fullPrefix","has","set","get","setGlobalLogLevel","forEach","logger","MessageBuilder","wrap","operation_1","operation","errorCode","UNKNOWN_ERROR","response","success","session","start","problem","currentTime","action","SESSION_START","payload","end","sessionId","endTime","endReason","SESSION_END","update","updates","SESSION_UPDATE","leave","leaveTime","SESSION_LEAVE","return","returnTime","SESSION_RETURN","updateActivity","activityTime","SESSION_UPDATE_ACTIVITY","addSubmission","code","language","SUBMISSION_ADD","data","export","reason","DATA_EXPORT","Object","assign","source","timestamp","import","options","DATA_IMPORT","getStats","DATA_GET_STATS","getSessions","DATA_GET_SESSIONS","getProblems","problemIds","DATA_GET_PROBLEMS","updateProblem","DATA_PROBLEM_UPDATE","settings","DATA_GET_SETTINGS","DATA_UPDATE_SETTINGS","unknown","SessionManager","currentSessionId","problemInfo","activityTimer","activityStartTime","lastActivityTime","startTracking","initialize","setupActivityTracking","addEventListener","hidden","handlePageLeave","handlePageReturn","closeSession","MANUAL","setInterval","TIMEOUT","startActivityTracking","clearInterval","updateSessionActivity","chrome","sendMessage","isNewSession","getSubmissionHandler","hostname","handleSubmission","handler","ProblemExtractor","normalizeDifficulty","difficulty","getProblemInfo","titleElement","querySelector","TITLE_SELECTOR","difficultyElement","DIFFICULTY_SELECTOR","problemId","split","title","rawDifficulty","id","retryGetProblemInfo","maxRetries","interval","retries","attempt","Timer","hasInstance","intervalId","isDragging","currentX","currentY","initialX","initialY","STORAGE_KEY","ALERT_TIME_KEY","alertTimeInSeconds","hasAlerted","handleDragStart","style","left","top","MouseEvent","clientX","clientY","touches","target","cursor","handleDrag","preventDefault","maxX","innerWidth","offsetWidth","maxY","innerHeight","offsetHeight","Math","min","max","updatePosition","handleDragEnd","savePosition","loadPosition","loadAlertTime","createTimerElement","initDragEvents","initWindowResizeHandler","storage","onChanged","addListener","changes","namespace","newMinutes","newValue","savedPosition","localStorage","getItem","x","y","parse","setDefaultPosition","setItem","createElement","cssText","body","appendChild","requestAnimationFrame","visibility","sync","setAlertTime","seconds","floor","removeAlert","removeItem","checkAndAlert","elapsedSeconds","showAlert","originalBg","backgroundColor","flash","count","flashInterval","elapsed","minutes","hours","toString","padStart","totalElapsedSeconds","destroy","removeEventListener","parentNode","removeChild","CONFIG","LeetCodeContentScript","sessionManager","initialized","OBSERVER_TIMEOUT","observer","initializeObserver","checkAndInitialize","initializeCore","waitForPageLoad","problemBrief","extractProblemBrief","problemDetail","extractProblemDetail","sendProblemToBackground","setupSessionManager","setupTimer","setupSubmitButtonListener","readyState","timer","alertMinutes","isSubmitButton","includes","MutationObserver","mutations","obs","disconnect","observe","childList","subtree","documentElement","lang","isTitleChinese","containsChineseCharacters","titleEN","titleZH","lastUpdated","test"],"sourceRoot":""}