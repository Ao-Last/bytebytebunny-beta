{"version":3,"file":"popup.js","mappings":"mBACO,MAAMA,EACG,mBAWHC,EAAkB,CAC3BC,sBAAuB,GACvBC,kBAAmB,EACnBC,kBAAmB,GACnBC,aAAc,GACdC,eAAgB,IAChBC,YAAa,GACbC,sBAAuB,IACvBC,iBAAkB,CAEdC,SAAU,IACVC,SAAU,KCtBX,IAAIC,EAwBAC,GAvBX,SAAWD,GAEPA,EAA6B,cAAI,gBACjCA,EAA2B,YAAI,cAC/BA,EAA8B,eAAI,iBAClCA,EAA6B,cAAI,gBACjCA,EAA8B,eAAI,iBAClCA,EAAuC,wBAAI,0BAE3CA,EAA8B,eAAI,yBAElCA,EAAmC,oBAAI,sBAEvCA,EAA8B,eAAI,iBAClCA,EAA2B,YAAI,cAC/BA,EAA2B,YAAI,cAC/BA,EAA8B,eAAI,iBAClCA,EAAiC,kBAAI,oBACrCA,EAAiC,kBAAI,oBACrCA,EAAiC,kBAAI,oBACrCA,EAAoC,qBAAI,sBAC3C,CArBD,CAqBGA,IAAkBA,EAAgB,CAAC,IAGtC,SAAWC,GAEPA,EAA2C,yBAAI,2BAC/CA,EAAsC,oBAAI,sBAC1CA,EAAuC,qBAAI,uBAC3CA,EAAuC,qBAAI,uBAC3CA,EAAsC,oBAAI,sBAC1CA,EAAoC,kBAAI,oBAExCA,EAAuC,qBAAI,uBAE3CA,EAAmC,iBAAI,mBACvCA,EAAoC,kBAAI,oBACxCA,EAAoC,kBAAI,oBAExCA,EAA4C,0BAAI,4BAEhDA,EAA6C,2BAAI,6BAEjDA,EAAmC,iBAAI,mBAEvCA,EAAgC,cAAI,eACvC,CAtBD,CAsBGA,IAAqBA,EAAmB,CAAC,ICjD5C,IAAIC,EAAwC,SAAUC,EAASC,EAAYC,EAAGC,GAE1E,OAAO,IAAKD,IAAMA,EAAIE,WAAU,SAAUC,EAASC,GAC/C,SAASC,EAAUC,GAAS,IAAMC,EAAKN,EAAUO,KAAKF,GAAS,CAAE,MAAOG,GAAKL,EAAOK,EAAI,CAAE,CAC1F,SAASC,EAASJ,GAAS,IAAMC,EAAKN,EAAiB,MAAEK,GAAS,CAAE,MAAOG,GAAKL,EAAOK,EAAI,CAAE,CAC7F,SAASF,EAAKI,GAJlB,IAAeL,EAIaK,EAAOC,KAAOT,EAAQQ,EAAOL,QAJ1CA,EAIyDK,EAAOL,MAJhDA,aAAiBN,EAAIM,EAAQ,IAAIN,GAAE,SAAUG,GAAWA,EAAQG,EAAQ,KAIjBO,KAAKR,EAAWK,EAAW,CAC7GH,GAAMN,EAAYA,EAAUa,MAAMhB,EAASC,GAAc,KAAKS,OAClE,GACJ,EAoBA,SAASO,EAAcT,GACnB,OAAIA,EAAQtB,EAAgBE,kBACjBF,EAAgBE,kBACvBoB,EAAQtB,EAAgBG,kBACjBH,EAAgBG,kBACpB6B,KAAKC,MAAc,GAARX,GAAc,EACpC,CAEA,SAASY,IACL,OAAOrB,EAAUsB,UAAM,OAAQ,GAAQ,YACnC,MAAMC,EAAiBC,SAASC,eAAe,aACzCC,EAAaF,SAASC,eAAe,YACrCE,EAAUC,WAAWL,EAAed,OAC1C,GAAIoB,MAAMF,GAEN,YADAJ,EAAed,MAAQtB,EAAgBC,sBAAsB0C,YAIjEJ,EAAWK,YAAc,SACzBL,EAAWM,UAAW,EACtB,MAAMC,EAAiBf,EAAcS,GACrCJ,EAAed,MAAQwB,EAAeH,WACtC,UACUI,OAAOC,QAAQC,KAAKC,IAAI,CAC1B,CAACnD,GAA0B+C,IAE/B,MAAMK,EAASd,SAASC,eAAe,cACnCa,IACAA,EAAOC,UAAUC,IAAI,QACrBC,YAAW,KACPH,EAAOC,UAAUG,OAAO,OAAO,GAChCvD,EAAgBO,uBAE3B,CACA,MAAOiD,GAEP,CACA,QAEIjB,EAAWK,YAAc,KACzBL,EAAWM,UAAW,CAC1B,CACJ,GACJ,CAEA,SAASY,IACLV,OAAOW,KAAKC,OAAO,CACfC,IAAKb,OAAOc,QAAQC,OAAO,iBAEnC,CAEA,SAASC,EAAoBC,GACzB,MAAMC,EAAS5B,SAASC,eAAe,iBACnC2B,IACID,EACAC,EAAOb,UAAUG,OAAO,UAGxBU,EAAOb,UAAUC,IAAI,UAGjC,CAEAhB,SAAS6B,iBAAiB,oBAAoB,KAC1C,IAAIC,EAAIC,EAAIC,EAAIC,EAAIC,GAhFxB,WACW1D,EAAUsB,UAAM,OAAQ,GAAQ,YACnC,IACI,MACMqC,SADezB,OAAOC,QAAQC,KAAKwB,IAAI1E,IACpBA,IAA4BC,EAAgBC,sBAC/DmC,EAAiBC,SAASC,eAAe,aAC3CF,IACAA,EAAed,MAAQkD,EAAU7B,WAEzC,CACA,MAAOa,GAEP,CACJ,GACJ,CAmEIkB,GAEA,MAAMtC,EAAiBC,SAASC,eAAe,aAC3CF,IACAA,EAAeuC,IAAM3E,EAAgBE,kBAAkByC,WACvDP,EAAewC,IAAM5E,EAAgBG,kBAAkBwC,WACvDP,EAAeb,KAAOvB,EAAgBI,aAAauC,YAGR,QAA9CwB,EAAK9B,SAASC,eAAe,mBAAgC,IAAP6B,GAAyBA,EAAGD,iBAAiB,QAAShC,GAC3D,QAAjDkC,EAAK/B,SAASC,eAAe,sBAAmC,IAAP8B,GAAyBA,EAAGF,iBAAiB,QAAST,GAEhHrB,SAAgEA,EAAe8B,iBAAiB,UAAU,KACtG,MAAM5C,EAAQmB,WAAWL,EAAed,OACnCoB,MAAMpB,KACPc,EAAed,MAAQS,EAAcT,GAAOqB,WAChD,IAG8C,QAAjD0B,EAAKhC,SAASC,eAAe,sBAAmC,IAAP+B,GAAyBA,EAAGH,iBAAiB,SAAS,KAC5GH,GAAoB,EAAK,IAGqB,QAAjDO,EAAKjC,SAASC,eAAe,sBAAmC,IAAPgC,GAAyBA,EAAGJ,iBAAiB,SAAS,KAC5GH,GAAoB,EAAM,IAGqB,QAAlDQ,EAAKlC,SAASC,eAAe,uBAAoC,IAAPiC,GAAyBA,EAAGL,iBAAiB,SAAS,IAAMrD,OAAU,OAAQ,OAAQ,GAAQ,YACrJ,MAAMgE,EAAWxC,SAASC,eAAe,iBACnCwC,EAAczC,SAASC,eAAe,eACtCyC,EAAgB1C,SAASC,eAAe,gBAC9C,GAAKuC,EAEL,IACIC,EAAYjC,UAAW,EACvBkC,EAAclC,UAAW,EACzBkC,EAAcnC,YAAc,UAC5BiC,EAASjC,YAAc,cACvB,MAAMoC,QAAiBjC,OAAOc,QAAQoB,YAAY,CAC9CC,OAAQvE,EAAcwE,iBAEtBH,EAASI,SACTP,EAASjC,YAAc,YACvBiC,EAASQ,MAAMC,MAAQ,YAGvBT,EAASjC,YAAc,UAAYoC,EAASxB,MAC5CqB,EAASQ,MAAMC,MAAQ,UAE/B,CACA,MAAO9B,GACHqB,EAASjC,YAAc,WAAaY,aAAiB+B,MAAQ/B,EAAMgC,QAAU,QAC7EX,EAASQ,MAAMC,MAAQ,SAC3B,CACA,QACIR,EAAYjC,UAAW,EACvBkC,EAAcnC,YAAc,OAC5BmC,EAAclC,UAAW,EACzBkB,GAAoB,EACxB,CACJ,KAAG,G","sources":["webpack://bytebytebunny/./src/constants/index.ts","webpack://bytebytebunny/./src/types/message.ts","webpack://bytebytebunny/./src/popup/index.ts"],"sourcesContent":["// 存储键名\nexport const STORAGE_KEYS = {\n    ALERT_TIME: 'timer_alert_time',\n    TIMER_POSITION: 'timer_position',\n    UI_LANGUAGE: 'ui_language',\n    SESSIONS: 'sessions',\n    PROBLEM_DETAILS: 'problem_details',\n    METADATA: 'bytebytebunny_metadata',\n    CORE_DATA: 'bytebytebunny_data',\n    USER_SETTINGS: 'bytebytebunny_settings',\n};\nexport const DEFAULT_UI_LANGUAGE = 'en';\n// 计时器相关常量\nexport const TIMER_CONSTANTS = {\n    DEFAULT_ALERT_MINUTES: 10, // 默认提醒时间（分钟）\n    MIN_ALERT_MINUTES: 0, // 最小提醒时间（分钟）\n    MAX_ALERT_MINUTES: 60, // 最大提醒时间（分钟）\n    STEP_MINUTES: 0.5, // 时间调整步长（分钟）\n    FLASH_INTERVAL: 500, // 闪烁间隔（毫秒）\n    FLASH_COUNT: 10, // 闪烁次数（5次来回，共10次变化）\n    SAVE_MESSAGE_DURATION: 2000, // 保存提示显示时间（毫秒）\n    DEFAULT_POSITION: {\n        // 默认位置\n        X_OFFSET: 150, // 距右边距（像素）\n        Y_OFFSET: 10, // 距上边距（像素）\n    },\n};\n// 难度映射\nexport const DIFFICULTY_MAP = {\n    Easy: { zh: '简单', en: 'Easy' },\n    Medium: { zh: '中等', en: 'Medium' },\n    Hard: { zh: '困难', en: 'Hard' },\n};\n/**\n * 艾宾浩斯遗忘曲线复习时间点（小时）\n * 5分钟 - 30分钟 - 12小时 - 1天 - 2天 - 4天 - 7天 - 15天\n */\nexport const REVIEW_INTERVALS = {\n    FIRST: 0.083, // 5分钟\n    SECOND: 0.5, // 30分钟\n    THIRD: 4, // 4小时\n    FOURTH: 24, // 1天\n    FIFTH: 72, // 3天\n    SIXTH: 168, // 7天\n    SEVENTH: 360, // 15天\n    EIGHTH: 720, // 30天\n};\n/**\n * 题目难度相关常量\n */\nexport const PROBLEM_CONSTANTS = {\n    // 难度分布权重\n    DIFFICULTY_DISTRIBUTION: {\n        Easy: 0.15, // 15% 简单题\n        Medium: 0.6, // 60% 中等题\n        Hard: 0.25, // 25% 困难题\n    },\n    // 期望解题时间（毫秒）\n    EXPECTED_SOLVING_TIME: {\n        Easy: {\n            expected: 15 * 60 * 1000, // 15分钟\n            maximum: 30 * 60 * 1000, // 30分钟\n        },\n        Medium: {\n            expected: 30 * 60 * 1000, // 30分钟\n            maximum: 60 * 60 * 1000, // 1小时\n        },\n        Hard: {\n            expected: 60 * 60 * 1000, // 1小时\n            maximum: 120 * 60 * 1000, // 2小时\n        },\n    },\n};\nexport const EVALUATION_CONSTANTS = {\n    RECENT_ACC_THRESHOLD: 0.8,\n    HISTORY_ACC_THRESHOLD: 0.7,\n    HISTORY_FIRST_SOLVE_MINUTES: 25,\n    RECENT_SESSION_DAYS: 15,\n    HISTORY_SESSION_COUNT: 3,\n};\n/**\n * 复习优先级计算权重\n */\nexport const REVIEW_WEIGHTS = {\n    Easy: {\n        timeDeviation: 0.5, // 时间偏差权重\n        failureRate: 0.3, // 失败率权重\n        solvingTime: 0.2, // 解题时间权重\n    },\n    Medium: {\n        timeDeviation: 0.4,\n        failureRate: 0.4,\n        solvingTime: 0.2,\n    },\n    Hard: {\n        timeDeviation: 0.3,\n        failureRate: 0.5,\n        solvingTime: 0.2,\n    },\n};\nexport const OBSERVER_CONSTANTS = {\n    TIMEOUT: 10000\n};\nexport const DATA_VERSION = {\n    CURRENT: 1\n};\nexport const STORAGE_CONSTANTS = {\n    DATA_VERSION: 1,\n    // ... 其他常量\n};\n/**\n * 会话相关常量\n */\nexport const SESSION_CONSTANTS = {\n    // 会话超时时间（毫秒）\n    // 超过此时间未活动的会话视为已超时，不可重用\n    TIMEOUT: 30 * 60 * 1000, // 30分钟\n    // 最小有效活动时间：10秒\n    // 用户需要在页面停留超过这个时间才计算为有效活动\n    MIN_ACTIVITY_DURATION: 10 * 1000,\n    // 活动检测间隔：1秒\n    // 用于定期检查用户是否仍在页面活动\n    ACTIVITY_CHECK_INTERVAL: 1000,\n    // 提交结果等待超时：30秒\n    SUBMISSION_RESULT_TIMEOUT: 30 * 1000,\n    // 提交结果检查间隔：1秒\n    SUBMISSION_CHECK_INTERVAL: 1000,\n};\n/**\n * 复习优先级计算相关常量\n */\nexport const PRIORITY_CONSTANTS = {\n    // 各维度权重\n    WEIGHTS: {\n        TIME_SCORE: 0.4, // 时间维度权重\n        VALUE_SCORE: 0.3, // 题目价值维度权重\n        PERFORMANCE_SCORE: 0.3 // 历史表现维度权重\n    },\n    // 时间分数计算参数\n    TIME_SCORE: {\n        // 错过复习点的最大分数\n        MISSED_MAX_SCORE: 0.8,\n        // 接近复习点的最大分数\n        APPROACHING_MAX_SCORE: 0.6,\n        // 不同阶段的容忍时间（小时）\n        TOLERANCE_HOURS: {\n            FIRST_DAY: 2, // 24小时内\n            THREE_DAYS: 6, // 1-3天\n            LATER: 12 // 3天以上\n        },\n        // 不同阶段的提前量（小时）\n        ADVANCE_HOURS: {\n            FIRST_DAY: 1, // 24小时内\n            THREE_DAYS: 3, // 1-3天\n            LATER: 6 // 3天以上\n        }\n    },\n    // 历史表现计算参数\n    PERFORMANCE: {\n        // 最近表现的时间窗口（天）\n        RECENT_WINDOW_DAYS: 30,\n        // 计算趋势时的最小练习次数\n        MIN_SESSIONS_FOR_TREND: 3,\n        // 练习次数归一化的基准值\n        PRACTICE_COUNT_BASE: 5\n    }\n};\n","// src/types/messages.ts\n// 定义所有可能的消息动作\nexport var MessageAction;\n(function (MessageAction) {\n    // 会话管理\n    MessageAction[\"SESSION_START\"] = \"session:start\";\n    MessageAction[\"SESSION_END\"] = \"session:end\";\n    MessageAction[\"SESSION_UPDATE\"] = \"session:update\";\n    MessageAction[\"SESSION_LEAVE\"] = \"session:leave\";\n    MessageAction[\"SESSION_RETURN\"] = \"session:return\";\n    MessageAction[\"SESSION_UPDATE_ACTIVITY\"] = \"session:update_activity\";\n    // 提交记录\n    MessageAction[\"SUBMISSION_ADD\"] = \"session:submission_add\";\n    // 问题相关\n    MessageAction[\"DATA_PROBLEM_UPDATE\"] = \"data:problem_update\";\n    // 数据管理\n    MessageAction[\"DATA_CLEAR_ALL\"] = \"data:clear_all\";\n    MessageAction[\"DATA_EXPORT\"] = \"data:export\";\n    MessageAction[\"DATA_IMPORT\"] = \"data:import\";\n    MessageAction[\"DATA_GET_STATS\"] = \"data:get_stats\";\n    MessageAction[\"DATA_GET_SESSIONS\"] = \"data:get_sessions\";\n    MessageAction[\"DATA_GET_PROBLEMS\"] = \"data:get_problems\";\n    MessageAction[\"DATA_GET_SETTINGS\"] = \"data:get_settings\";\n    MessageAction[\"DATA_UPDATE_SETTINGS\"] = \"data:update_settings\";\n})(MessageAction || (MessageAction = {}));\n// 预定义错误代码\nexport var MessageErrorCode;\n(function (MessageErrorCode) {\n    // 会话相关错误\n    MessageErrorCode[\"SESSION_INITIALIZE_ERROR\"] = \"session:initialize_error\";\n    MessageErrorCode[\"SESSION_LEAVE_ERROR\"] = \"session:leave_error\";\n    MessageErrorCode[\"SESSION_RETURN_ERROR\"] = \"session:return_error\";\n    MessageErrorCode[\"SESSION_UPDATE_ERROR\"] = \"session:update_error\";\n    MessageErrorCode[\"SESSION_CLOSE_ERROR\"] = \"session:close_error\";\n    MessageErrorCode[\"SESSION_NOT_FOUND\"] = \"session:not_found\";\n    // 提交相关错误\n    MessageErrorCode[\"SUBMISSION_ADD_ERROR\"] = \"submission:add_error\";\n    // 数据管理相关错误\n    MessageErrorCode[\"DATA_CLEAR_ERROR\"] = \"data:clear_error\";\n    MessageErrorCode[\"DATA_EXPORT_ERROR\"] = \"data:export_error\";\n    MessageErrorCode[\"DATA_IMPORT_ERROR\"] = \"data:import_error\";\n    // 问题相关错误\n    MessageErrorCode[\"DATA_PROBLEM_UPDATE_ERROR\"] = \"data:problem_update_error\";\n    // 设置相关错误\n    MessageErrorCode[\"DATA_SETTINGS_UPDATE_ERROR\"] = \"data:settings_update_error\";\n    // 存储相关错误\n    MessageErrorCode[\"DATA_STATS_ERROR\"] = \"data:stats_error\";\n    // 通用错误\n    MessageErrorCode[\"UNKNOWN_ERROR\"] = \"error:unknown\";\n})(MessageErrorCode || (MessageErrorCode = {}));\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { STORAGE_KEYS, TIMER_CONSTANTS } from '../constants';\nimport { MessageAction } from '../types/message';\n// 加载保存的设置\nfunction loadOptions() {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            const result = yield chrome.storage.sync.get(STORAGE_KEYS.ALERT_TIME);\n            const alertTime = result[STORAGE_KEYS.ALERT_TIME] || TIMER_CONSTANTS.DEFAULT_ALERT_MINUTES;\n            const alertTimeInput = document.getElementById('alertTime');\n            if (alertTimeInput) {\n                alertTimeInput.value = alertTime.toString();\n            }\n        }\n        catch (error) {\n            console.error('Failed to load options:', error);\n        }\n    });\n}\n// 验证并规范化时间值\nfunction normalizeTime(value) {\n    if (value < TIMER_CONSTANTS.MIN_ALERT_MINUTES)\n        return TIMER_CONSTANTS.MIN_ALERT_MINUTES;\n    if (value > TIMER_CONSTANTS.MAX_ALERT_MINUTES)\n        return TIMER_CONSTANTS.MAX_ALERT_MINUTES;\n    return Math.round(value * 10) / 10;\n}\n// 保存设置\nfunction saveOptions() {\n    return __awaiter(this, void 0, void 0, function* () {\n        const alertTimeInput = document.getElementById('alertTime');\n        const saveButton = document.getElementById('saveTime');\n        const minutes = parseFloat(alertTimeInput.value);\n        if (isNaN(minutes)) {\n            alertTimeInput.value = TIMER_CONSTANTS.DEFAULT_ALERT_MINUTES.toString();\n            return;\n        }\n        // 添加保存中的状态\n        saveButton.textContent = '保存中...';\n        saveButton.disabled = true;\n        const normalizedTime = normalizeTime(minutes);\n        alertTimeInput.value = normalizedTime.toString();\n        try {\n            yield chrome.storage.sync.set({\n                [STORAGE_KEYS.ALERT_TIME]: normalizedTime,\n            });\n            const status = document.getElementById('saveStatus');\n            if (status) {\n                status.classList.add('show');\n                setTimeout(() => {\n                    status.classList.remove('show');\n                }, TIMER_CONSTANTS.SAVE_MESSAGE_DURATION);\n            }\n        }\n        catch (error) {\n            console.error('Failed to save options:', error);\n        }\n        finally {\n            // 恢复按钮状态\n            saveButton.textContent = '保存';\n            saveButton.disabled = false;\n        }\n    });\n}\n// 打开记录页面\nfunction openRecords() {\n    chrome.tabs.create({\n        url: chrome.runtime.getURL('records.html'),\n    });\n}\n// 在文件开头添加一个函数来显示/隐藏对话框\nfunction toggleConfirmDialog(show) {\n    const dialog = document.getElementById('confirmDialog');\n    if (dialog) {\n        if (show) {\n            dialog.classList.remove('hidden');\n        }\n        else {\n            dialog.classList.add('hidden');\n        }\n    }\n}\n// 初始化\ndocument.addEventListener('DOMContentLoaded', () => {\n    var _a, _b, _c, _d, _e;\n    loadOptions();\n    // 设置输入框的属性\n    const alertTimeInput = document.getElementById('alertTime');\n    if (alertTimeInput) {\n        alertTimeInput.min = TIMER_CONSTANTS.MIN_ALERT_MINUTES.toString();\n        alertTimeInput.max = TIMER_CONSTANTS.MAX_ALERT_MINUTES.toString();\n        alertTimeInput.step = TIMER_CONSTANTS.STEP_MINUTES.toString();\n    }\n    // 绑定事件\n    (_a = document.getElementById('saveTime')) === null || _a === void 0 ? void 0 : _a.addEventListener('click', saveOptions);\n    (_b = document.getElementById('openRecords')) === null || _b === void 0 ? void 0 : _b.addEventListener('click', openRecords);\n    // 添加输入验证\n    alertTimeInput === null || alertTimeInput === void 0 ? void 0 : alertTimeInput.addEventListener('change', () => {\n        const value = parseFloat(alertTimeInput.value);\n        if (!isNaN(value)) {\n            alertTimeInput.value = normalizeTime(value).toString();\n        }\n    });\n    // 清理所有数据\n    (_c = document.getElementById('clearAllBtn')) === null || _c === void 0 ? void 0 : _c.addEventListener('click', () => {\n        toggleConfirmDialog(true);\n    });\n    // 取消清除\n    (_d = document.getElementById('cancelClear')) === null || _d === void 0 ? void 0 : _d.addEventListener('click', () => {\n        toggleConfirmDialog(false);\n    });\n    // 确认清除\n    (_e = document.getElementById('confirmClear')) === null || _e === void 0 ? void 0 : _e.addEventListener('click', () => __awaiter(void 0, void 0, void 0, function* () {\n        const statusEl = document.getElementById('cleanupStatus');\n        const clearButton = document.getElementById('clearAllBtn');\n        const confirmButton = document.getElementById('confirmClear');\n        if (!statusEl)\n            return;\n        try {\n            clearButton.disabled = true;\n            confirmButton.disabled = true;\n            confirmButton.textContent = '正在清除...';\n            statusEl.textContent = '正在清除所有数据...';\n            const response = yield chrome.runtime.sendMessage({\n                action: MessageAction.DATA_CLEAR_ALL\n            });\n            if (response.success) {\n                statusEl.textContent = '✓ 所有数据已清除';\n                statusEl.style.color = '#00c853';\n            }\n            else {\n                statusEl.textContent = '✗ 清除失败：' + response.error;\n                statusEl.style.color = '#dc3545';\n            }\n        }\n        catch (error) {\n            statusEl.textContent = '✗ 清除出错：' + (error instanceof Error ? error.message : '未知错误');\n            statusEl.style.color = '#dc3545';\n        }\n        finally {\n            clearButton.disabled = false;\n            confirmButton.textContent = '确认清除';\n            confirmButton.disabled = false;\n            toggleConfirmDialog(false);\n        }\n    }));\n});\n"],"names":["STORAGE_KEYS","TIMER_CONSTANTS","DEFAULT_ALERT_MINUTES","MIN_ALERT_MINUTES","MAX_ALERT_MINUTES","STEP_MINUTES","FLASH_INTERVAL","FLASH_COUNT","SAVE_MESSAGE_DURATION","DEFAULT_POSITION","X_OFFSET","Y_OFFSET","MessageAction","MessageErrorCode","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","normalizeTime","Math","round","saveOptions","this","alertTimeInput","document","getElementById","saveButton","minutes","parseFloat","isNaN","toString","textContent","disabled","normalizedTime","chrome","storage","sync","set","status","classList","add","setTimeout","remove","error","openRecords","tabs","create","url","runtime","getURL","toggleConfirmDialog","show","dialog","addEventListener","_a","_b","_c","_d","_e","alertTime","get","loadOptions","min","max","statusEl","clearButton","confirmButton","response","sendMessage","action","DATA_CLEAR_ALL","success","style","color","Error","message"],"sourceRoot":""}